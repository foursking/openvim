-- phpMyAdmin SQL Dump
-- version 3.5.2.2
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2013 年 07 月 17 日 20:29
-- 服务器版本: 5.5.31-0ubuntu0.12.04.1
-- PHP 版本: 5.3.10-1ubuntu3.6

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `openvim`
--

-- --------------------------------------------------------

--
-- 表的结构 `op_category`
--

CREATE TABLE IF NOT EXISTS `op_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `categoryName` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `id` (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=6 ;

--
-- 转存表中的数据 `op_category`
--

INSERT INTO `op_category` (`id`, `categoryName`) VALUES
(1, 'plugin'),
(2, 'color'),
(3, 'tips'),
(4, 'doc'),
(5, 'about');

-- --------------------------------------------------------

--
-- 表的结构 `op_plugin`
--

CREATE TABLE IF NOT EXISTS `op_plugin` (
  `pluginId` int(11) NOT NULL AUTO_INCREMENT COMMENT 'plugin 主键',
  `uid` int(11) NOT NULL,
  `pluginTypeId` int(11) NOT NULL COMMENT 'plugin 名称',
  `pluginName` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `pluginSummary` text COLLATE utf8_unicode_ci NOT NULL,
  `pluginUrl` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `pluginDescription` text COLLATE utf8_unicode_ci NOT NULL,
  `pluginInstall` text COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`pluginId`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='插件表' AUTO_INCREMENT=6 ;

--
-- 转存表中的数据 `op_plugin`
--

INSERT INTO `op_plugin` (`pluginId`, `uid`, `pluginTypeId`, `pluginName`, `pluginSummary`, `pluginUrl`, `pluginDescription`, `pluginInstall`) VALUES
(1, 0, 4, 'molokai', 'A port of the monokai scheme for TextMate', '', '', ''),
(4, 0, 5, 'pythoncomplete', 'Python Omni Completion', '', '', ''),
(3, 0, 4, 'Colo(u)r Sampler Pack', '[[[Oct 2012 Update]]] Top 100(ish) Themes, GUI Menu', '', '', ''),
(5, 0, 6, 'surround', 'surroudn', '', '', '');

-- --------------------------------------------------------

--
-- 表的结构 `op_tags`
--

CREATE TABLE IF NOT EXISTS `op_tags` (
  `tagsId` int(11) NOT NULL AUTO_INCREMENT,
  `tagsName` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`tagsId`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=208 ;

--
-- 转存表中的数据 `op_tags`
--

INSERT INTO `op_tags` (`tagsId`, `tagsName`) VALUES
(1, 'shift'),
(2, 'remapping'),
(3, 'mapping'),
(4, 'arrow'),
(5, 'splits'),
(6, 'tabs'),
(7, 'ctags'),
(8, 'edit'),
(9, 'view'),
(10, 'browse'),
(11, 'file'),
(12, 'autocomplete'),
(13, 'buffer'),
(14, 'tab'),
(15, 'movement'),
(16, 'save'),
(17, 'retab'),
(18, 'macvim'),
(19, 'gui'),
(20, 'quit'),
(21, 'cursor'),
(22, 'scrolling'),
(23, 'omni'),
(24, 'escape'),
(25, 'space'),
(26, 'leader'),
(27, 'folds'),
(28, 'substitute'),
(29, 'multiple'),
(30, 'dot'),
(31, 'tags'),
(32, 'semicolon'),
(33, 'append'),
(34, 'navigation'),
(35, 'diff'),
(36, 'fillchars'),
(37, 'normal'),
(38, 'browser'),
(39, 'fast'),
(40, 'visual'),
(41, 'search'),
(42, 'Google'),
(43, 'LaTeX'),
(44, 'indent'),
(45, 'mode'),
(46, 'join'),
(47, 'gvim'),
(48, 'autocommand'),
(49, 'window'),
(50, 'maximize'),
(51, 'coloration'),
(52, 'markdown'),
(53, 'resize'),
(54, 'find'),
(55, 'path'),
(56, 'project'),
(57, 'files'),
(58, 'center'),
(59, 'sudo'),
(60, 'insert'),
(61, 'delete'),
(62, 'ctrlp'),
(63, 'imap'),
(64, 'git'),
(65, 'spell'),
(66, 'mouse'),
(67, 'help'),
(68, 'list'),
(69, 'global'),
(70, 'unix'),
(71, 'clear'),
(72, 'whitespace'),
(73, 'tile'),
(74, 'display'),
(75, 'write'),
(76, 'shortcut'),
(77, 'switching'),
(78, 'helpheight'),
(79, 'rspec'),
(80, 'ruby'),
(81, 'macros'),
(82, 'highlight'),
(83, 'read'),
(84, 'undo'),
(85, 'hotkeys'),
(86, 'vimrc'),
(87, 'redo'),
(88, 'tabbing'),
(89, 'xml'),
(90, 'html'),
(91, 'tag'),
(92, 'yank'),
(93, 'clipboard'),
(94, 'system'),
(95, 'grep'),
(96, 'paste'),
(97, 'regex'),
(98, 'images'),
(99, 'lines'),
(100, 'Test'),
(101, 'relativenumber'),
(102, 'autocmd'),
(103, 'toggle'),
(104, 'colorcolumn'),
(105, 'django'),
(106, 'unittests'),
(107, 'animation'),
(108, 'copying'),
(109, 'selection'),
(110, 'guides'),
(111, 'config'),
(112, 'rename'),
(113, 'filename'),
(114, 'unicode'),
(115, 'emacs'),
(116, 'Consolas'),
(117, 'Font'),
(118, 'threecents'),
(119, 'vsplit'),
(120, 'remove'),
(121, 'newline'),
(122, 'color'),
(123, 'column'),
(124, 'listchars'),
(125, 'beep'),
(126, 'jump'),
(127, 'mac'),
(128, 'options'),
(129, 'tidy'),
(130, 'earlier'),
(131, 'later'),
(132, 'time'),
(133, 'state'),
(134, 'title'),
(135, 'commandt'),
(136, 'perl'),
(137, 'NERDTree'),
(138, 'character'),
(139, 'noesc'),
(140, 'format'),
(141, 'plugins'),
(142, 'cursorline'),
(143, 'replace'),
(144, 'curosr'),
(145, 'carriage'),
(146, 'returns'),
(147, 'trailing'),
(148, 'restore'),
(149, 'position'),
(150, 'wikia'),
(151, 'rnu'),
(152, 'number'),
(153, 'relative'),
(154, 'completion'),
(155, 'template'),
(156, 'autocorrect'),
(157, 'abbreviation'),
(158, 'live'),
(159, 'typo'),
(160, 'correct'),
(161, 'coffeescript'),
(162, 'textmate'),
(163, 'comment'),
(164, 'outdent'),
(165, 'shell'),
(166, 'ls'),
(167, 'backups'),
(168, 'mercurial'),
(169, 'annotate'),
(170, 'ack'),
(171, 'operator'),
(172, 'terminal'),
(173, 'colorscheme'),
(174, 'syntax'),
(175, 'refresh'),
(176, 'vertically'),
(177, 'filetype'),
(178, 'FocusLost'),
(179, 'setlocal'),
(180, 'marks'),
(181, 'swap'),
(182, 'C'),
(183, 'header'),
(184, 'ifndef'),
(185, 'include'),
(186, 'guard'),
(187, 'preprocessor'),
(188, 'vimgrep'),
(189, 'guid'),
(190, 'fugative'),
(191, 'merge'),
(192, 'digraphs'),
(193, 'wrap'),
(194, 'custom'),
(195, 'execute'),
(196, 'cd'),
(197, 'directory'),
(198, 'create'),
(199, 'keep'),
(200, 'php'),
(201, 'invisibles'),
(202, 'root'),
(203, 'tee'),
(204, 'source'),
(205, 'vimscript'),
(206, 'alternate'),
(207, 'learning');

-- --------------------------------------------------------

--
-- 表的结构 `op_tags_relationships`
--

CREATE TABLE IF NOT EXISTS `op_tags_relationships` (
  `tipsId` int(11) NOT NULL,
  `tagsId` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `op_tags_relationships`
--

INSERT INTO `op_tags_relationships` (`tipsId`, `tagsId`) VALUES
(1, 15),
(1, 207),
(2, 108),
(3, 2),
(3, 5),
(4, 2),
(4, 108),
(6, 2),
(6, 24),
(7, 2),
(8, 2),
(9, 41),
(9, 170),
(10, 44),
(10, 40),
(11, 71),
(11, 41),
(11, 82),
(12, 2),
(12, 13),
(12, 206),
(13, 204),
(13, 205),
(14, 178),
(15, 2),
(15, 15),
(15, 193),
(16, 103),
(16, 201),
(17, 2),
(19, 86),
(19, 8),
(20, 204),
(20, 86),
(21, 140),
(21, 89),
(22, 24),
(22, 37),
(22, 45),
(23, 8),
(23, 59),
(23, 202),
(23, 11),
(23, 203),
(23, 16),
(24, 140),
(24, 12),
(24, 88),
(25, 120),
(25, 147),
(25, 25),
(25, 72),
(25, 61),
(26, 120),
(26, 140),
(26, 88),
(26, 25),
(26, 14),
(27, 41),
(27, 82),
(27, 103),
(29, 201),
(29, 68),
(29, 124),
(29, 194),
(30, 200),
(31, 103),
(31, 96),
(31, 140),
(31, 199),
(32, 18),
(33, 11),
(33, 194),
(33, 155),
(33, 198),
(34, 196),
(34, 197),
(35, 44),
(36, 21),
(38, 109),
(39, 14),
(40, 194),
(40, 195),
(40, 85),
(43, 103),
(43, 128),
(44, 2),
(44, 26),
(45, 24),
(51, 15),
(51, 193),
(52, 40),
(53, 13),
(54, 13),
(55, 8),
(56, 13),
(57, 193),
(58, 15),
(59, 192),
(61, 191),
(62, 13),
(62, 190),
(63, 189),
(64, 41),
(64, 188),
(65, 108),
(65, 92),
(66, 96),
(67, 37),
(67, 25),
(68, 2),
(68, 24),
(68, 76),
(69, 15),
(70, 49),
(71, 44),
(71, 88),
(72, 182),
(72, 183),
(72, 184),
(72, 185),
(72, 186),
(72, 187),
(73, 2),
(73, 126),
(73, 180),
(73, 181),
(74, 27),
(75, 48),
(76, 44),
(76, 177),
(76, 179),
(77, 178),
(77, 16),
(78, 71),
(78, 72),
(79, 13),
(79, 4),
(80, 5),
(80, 11),
(80, 49),
(81, 48),
(81, 177),
(81, 79),
(84, 15),
(84, 99),
(84, 176),
(85, 143),
(85, 41),
(85, 21),
(86, 22),
(87, 174),
(87, 175),
(89, 2),
(89, 5),
(90, 172),
(90, 173),
(90, 47),
(91, 72),
(91, 48),
(93, 41),
(93, 170),
(93, 171),
(94, 40),
(94, 168),
(94, 169),
(96, 165),
(96, 166),
(96, 167),
(97, 34),
(98, 40),
(99, 44),
(99, 162),
(99, 164),
(100, 162),
(100, 163),
(103, 96),
(104, 161),
(106, 64),
(106, 35),
(108, 155),
(108, 156),
(108, 157),
(108, 158),
(108, 159),
(108, 160),
(109, 76),
(110, 43),
(111, 127),
(112, 37),
(112, 11),
(112, 16),
(115, 15),
(115, 126),
(116, 2),
(116, 13),
(117, 40),
(117, 154),
(118, 120),
(118, 147),
(118, 72),
(118, 80),
(120, 108),
(120, 26),
(121, 44),
(121, 96),
(122, 101),
(122, 151),
(122, 152),
(122, 153),
(123, 21),
(123, 148),
(123, 149),
(123, 150),
(124, 147),
(124, 72),
(125, 72),
(125, 14),
(125, 145),
(125, 146),
(125, 121),
(128, 2),
(129, 2),
(129, 41),
(130, 144),
(131, 143),
(132, 49),
(132, 142),
(133, 85),
(133, 141),
(135, 140),
(136, 60),
(136, 138),
(136, 139),
(137, 13),
(139, 5),
(139, 137),
(140, 136),
(142, 136),
(143, 13),
(143, 4),
(143, 127),
(144, 18),
(146, 27),
(148, 3),
(151, 11),
(151, 14),
(152, 49),
(153, 64),
(154, 11),
(154, 135),
(155, 72),
(155, 21),
(157, 128),
(157, 84),
(159, 49),
(159, 134),
(160, 130),
(160, 131),
(160, 132),
(160, 133),
(161, 72),
(161, 121),
(162, 13),
(162, 48),
(162, 58),
(164, 44),
(164, 90),
(164, 129),
(165, 128),
(165, 84),
(166, 96),
(166, 127),
(167, 13),
(167, 126),
(170, 125),
(171, 16),
(171, 102),
(172, 124),
(173, 122),
(173, 123),
(174, 5),
(174, 49),
(177, 37),
(177, 121),
(177, 60),
(178, 41),
(178, 120),
(178, 26),
(179, 5),
(179, 53),
(179, 119),
(180, 96),
(182, 118),
(183, 34),
(184, 34),
(185, 2),
(185, 108),
(185, 92),
(185, 72),
(185, 3),
(186, 25),
(187, 116),
(187, 117),
(189, 2),
(189, 15),
(190, 2),
(191, 96),
(192, 44),
(192, 25),
(192, 6),
(193, 13),
(194, 115),
(195, 95),
(196, 15),
(196, 99),
(197, 68),
(197, 114),
(198, 25),
(198, 72),
(199, 11),
(199, 112),
(199, 113),
(200, 111),
(202, 5),
(202, 13),
(202, 14),
(202, 49),
(202, 34),
(202, 77),
(203, 44),
(203, 14),
(203, 68),
(203, 110),
(204, 75),
(204, 20),
(204, 1),
(205, 108),
(207, 108),
(207, 96),
(207, 109),
(209, 44),
(209, 14),
(209, 6),
(209, 107),
(211, 105),
(211, 106),
(212, 13),
(212, 4),
(212, 6),
(217, 103),
(217, 3),
(217, 104),
(218, 103),
(218, 3),
(218, 101),
(219, 13),
(219, 49),
(219, 101),
(219, 102),
(220, 2),
(220, 5),
(220, 34),
(222, 100),
(223, 15),
(224, 82),
(224, 35),
(225, 5),
(226, 2),
(226, 15),
(226, 99),
(228, 97),
(228, 98),
(229, 96),
(232, 41),
(232, 64),
(232, 95),
(233, 24),
(233, 45),
(233, 16),
(234, 27),
(235, 47),
(235, 94),
(236, 92),
(236, 93),
(237, 49),
(238, 3),
(238, 60),
(239, 3),
(239, 84),
(240, 13),
(240, 3),
(242, 8),
(242, 89),
(242, 90),
(242, 91),
(245, 88),
(245, 14),
(245, 6),
(246, 76),
(246, 87),
(247, 86),
(248, 72),
(248, 76),
(248, 85),
(251, 84),
(252, 6),
(253, 28),
(254, 11),
(254, 83),
(255, 11),
(255, 75),
(256, 41),
(256, 82),
(256, 3),
(257, 13),
(257, 34),
(257, 4),
(258, 79),
(258, 80),
(258, 81),
(259, 5),
(259, 67),
(259, 78),
(260, 15),
(260, 14),
(260, 76),
(260, 49),
(260, 77),
(261, 64),
(262, 15),
(262, 21),
(262, 75),
(263, 13),
(263, 49),
(263, 73),
(263, 74),
(264, 71),
(264, 72),
(265, 70),
(265, 62),
(266, 41),
(266, 68),
(266, 69),
(267, 28),
(269, 49),
(269, 34),
(270, 67),
(270, 14),
(270, 49),
(272, 44),
(273, 66),
(274, 65),
(275, 64),
(275, 65),
(277, 24),
(277, 63),
(279, 13),
(279, 61),
(279, 62),
(282, 37),
(282, 60),
(283, 49),
(283, 34),
(284, 14),
(284, 34),
(285, 59),
(285, 16),
(286, 41),
(286, 58),
(287, 34),
(287, 31),
(288, 41),
(288, 54),
(288, 55),
(288, 56),
(288, 57),
(290, 5),
(290, 49),
(290, 53),
(291, 51),
(291, 52),
(292, 49),
(292, 50),
(293, 15),
(293, 3),
(293, 34),
(294, 48),
(294, 31),
(295, 47),
(296, 21),
(296, 3),
(296, 46),
(297, 44),
(297, 37),
(297, 45),
(297, 3),
(298, 43),
(299, 13),
(300, 2),
(300, 15),
(301, 5),
(301, 13),
(302, 40),
(302, 41),
(302, 42),
(303, 37),
(303, 11),
(303, 38),
(303, 39),
(304, 27),
(304, 35),
(304, 36),
(305, 13),
(305, 34),
(306, 32),
(306, 33),
(307, 31),
(307, 7),
(308, 8),
(308, 29),
(308, 30),
(309, 28),
(310, 28),
(311, 27),
(313, 2),
(313, 25),
(313, 26),
(313, 3),
(314, 25),
(314, 26),
(315, 2),
(315, 24),
(315, 3),
(316, 2),
(316, 3),
(316, 23),
(317, 2),
(317, 15),
(317, 21),
(317, 3),
(317, 22),
(318, 2),
(318, 15),
(318, 3),
(319, 2),
(319, 8),
(319, 3),
(320, 13),
(320, 20),
(321, 14),
(321, 18),
(321, 6),
(321, 19),
(322, 16),
(322, 17),
(323, 15),
(323, 5),
(324, 13),
(324, 14),
(325, 11),
(325, 12),
(326, 8),
(326, 9),
(326, 10),
(327, 7),
(328, 5),
(328, 6),
(329, 2),
(329, 4),
(330, 2),
(330, 3),
(332, 1);

-- --------------------------------------------------------

--
-- 表的结构 `op_tips`
--

CREATE TABLE IF NOT EXISTS `op_tips` (
  `tipsId` int(11) NOT NULL AUTO_INCREMENT,
  `tipsUid` int(11) NOT NULL DEFAULT '0',
  `tipsTitle` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `tipsContent` text COLLATE utf8_unicode_ci NOT NULL,
  `tipsCtime` date NOT NULL,
  `tipsUtime` date NOT NULL,
  PRIMARY KEY (`tipsId`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=665 ;

--
-- 转存表中的数据 `op_tips`
--

INSERT INTO `op_tips` (`tipsId`, `tipsUid`, `tipsTitle`, `tipsContent`, `tipsCtime`, `tipsUtime`) VALUES
(1, 0, 'Turn off arrow keys\n', 'nnoremap &lt;up&gt; &lt;nop&gt;\r\nnnoremap &lt;down&gt; &lt;nop&gt;\r\nnnoremap &lt;left&gt; &lt;nop&gt;\r\nnnoremap &lt;right&gt; &lt;nop&gt;\r\ninoremap &lt;up&gt; &lt;nop&gt;\r\ninoremap &lt;down&gt; &lt;nop&gt;\r\ninoremap &lt;left&gt; &lt;nop&gt;\r\ninoremap &lt;right&gt; &lt;nop&gt;', '2013-07-10', '2013-07-10'),
(2, 0, 'Use system clipboard for copy and paste\n', 'set clipboard=unnamed', '2013-07-10', '2013-07-10'),
(3, 0, 'Easy split navigation\n', 'nnoremap &lt;C-h&gt; &lt;C-w&gt;h\r\nnnoremap &lt;C-j&gt; &lt;C-w&gt;j\r\nnnoremap &lt;C-k&gt; &lt;C-w&gt;k\r\nnnoremap &lt;C-l&gt; &lt;C-w&gt;l', '2013-07-10', '2013-07-10'),
(4, 0, 'Make Y behave like other capitals\n', 'map Y y$', '2013-07-10', '2013-07-10'),
(5, 0, 'Underline/overline current line\n', 'nnoremap &lt;leader&gt;== yyPv$r=jyypv$r=\r\nnnoremap &lt;leader&gt;** yyPv$r*jyypv$r*\r\nnnoremap &lt;leader&gt;=  yypv$r=\r\nnnoremap &lt;leader&gt;-  yypv$r-\r\nnnoremap &lt;leader&gt;^  yypv$r^\r\nnnoremap &lt;leader&gt;&quot;  yypv$r&quot;</pre>\n</p>\n<p>\n<pre><code>This sample line\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>This sample line\n----------------\n</code>', '2013-07-10', '2013-07-10'),
(6, 0, 'Use jk as &lt;Esc&gt; alternative\n', 'inoremap jk &lt;Esc&gt;', '2013-07-10', '2013-07-10'),
(7, 0, 'Jump to start and end of line using the home row keys\n', 'noremap H ^\r\nnoremap L $', '2013-07-10', '2013-07-10'),
(8, 0, 'Use sane regexes\n', 'nnoremap / /\\v\r\nvnoremap / /\\v', '2013-07-10', '2013-07-10'),
(9, 0, 'Search for the word under the cursor\n', '&quot; Highlight word at cursor without changing position\r\nnnoremap &lt;leader&gt;h *&lt;C-O&gt;\r\n&quot; Highlight word at cursor and then Ack it.\r\nnnoremap &lt;leader&gt;H *&lt;C-O&gt;:AckFromSearch!&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(10, 0, 'Reselect visual block after indent/outdent\n', 'vnoremap &lt; &lt;gv\r\nvnoremap &gt; &gt;gv', '2013-07-10', '2013-07-10'),
(11, 0, 'Clear search highlights\n', 'noremap &lt;silent&gt;&lt;Leader&gt;/ :nohls&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(12, 0, 'Open last/alternate buffer\n', 'noremap &lt;Leader&gt;&lt;Leader&gt; &lt;C-^&gt;', '2013-07-10', '2013-07-10'),
(13, 0, 'Source a single line of Vimscript\n', 'nnoremap &lt;Leader&gt;S ^vg_y:execute @@&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(14, 0, 'Save and return to normal mode on FocusLost\n', 'au FocusLost * :silent! wall                 &quot; Save on FocusLost\r\nau FocusLost * call feedkeys(&quot;\\&lt;C-\\&gt;\\&lt;C-n&gt;&quot;) &quot; Return to normal mode on FocustLost', '2013-07-10', '2013-07-10'),
(15, 0, 'Improve up/down movement on wrapped lines\n', 'nnoremap j gj\r\nnnoremap k gk', '2013-07-10', '2013-07-10'),
(16, 0, 'Toggle invisibles\n', 'noremap &lt;Leader&gt;i :set list!&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(17, 0, 'Better comand-line editing\n', 'cnoremap &lt;C-j&gt; &lt;t_kd&gt;\r\ncnoremap &lt;C-k&gt; &lt;t_ku&gt;\r\ncnoremap &lt;C-a&gt; &lt;Home&gt;\r\ncnoremap &lt;C-e&gt; &lt;End&gt;', '2013-07-10', '2013-07-10'),
(18, 0, 'Toggle relative line numbering\n', 'function! NumberToggle()\r\n  if(&amp;relativenumber == 1)\r\n    set number\r\n  else\r\n    set relativenumber\r\n  endif\r\nendfunc\r\nnnoremap &lt;C-n&gt; :call NumberToggle()&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(19, 0, 'Easily Edit VIMRC\n', 'nnoremap &lt;leader&gt;ev :tabedit $MYVIMRC&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(20, 0, 'Easily Source VIMRC\n', 'nnoremap &lt;leader&gt;sv :so $MYVIMRC&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(21, 0, 'Reformat and Tidy XML Files\n', 'nnoremap &lt;F2&gt; :silent 1,$!xmllint --format --recover - 2&gt;/dev/null&lt;cr&gt;\r\n\r\n# for windows, download xmllint software:\r\n# http://code.google.com/p/xmllint/\r\n# and use below\r\n\r\n# nnoremap &lt;F2&gt; :silent 1,$!xmllint %&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(22, 0, 'Use jj to Escape\n', 'inoremap jj &lt;esc&gt;', '2013-07-10', '2013-07-10'),
(23, 0, 'Force Saving Files that Require Root Permission\n', 'cmap w!! %!sudo tee &gt; /dev/null %', '2013-07-10', '2013-07-10'),
(24, 0, 'Use tab for auto completion\n', 'function! SuperTab()\r\n    if (strpart(getline(''.''),col(''.'')-2,1)=~''^\\W\\?$'')\r\n        return &quot;\\&lt;Tab&gt;&quot;\r\n    else\r\n        return &quot;\\&lt;C-n&gt;&quot;\r\n    endif\r\nendfunction\r\nimap &lt;Tab&gt; &lt;C-R&gt;=SuperTab()&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(25, 0, 'Remove All the Trailing Whitespaces\n', 'nnoremap &lt;leader&gt;W :%s/\\s\\+$//&lt;cr&gt;:let @/=''''&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(26, 0, 'Retab and Format the File with Spaces\n', 'nnoremap &lt;leader&gt;T :set expandtab&lt;cr&gt;:retab!&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(27, 0, 'Toggle Search Highlights\n', 'noremap &lt;space&gt; :set hlsearch! hlsearch?&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(28, 0, 'Swipe Between Buffers\n', 'set hidden\r\n    map &lt;SwipeLeft&gt; :bprev&lt;CR&gt;\r\n    map &lt;SwipeRight&gt; :bnext&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(29, 0, 'Custom Invisibles\n', 'set list\r\nset listchars=tab:▸\\ ,eol:¬,trail:⋅,extends:❯,precedes:❮\r\nset showbreak=↪', '2013-07-10', '2013-07-10'),
(30, 0, 'PHP Lint and Execute\n', 'map &lt;Leader&gt;p :! php -l %&lt;CR&gt;\r\nmap &lt;Leader&gt;P :! php -q %&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(31, 0, 'Toggle Paste\n', 'set pastetoggle=&lt;F8&gt; &quot;enable paste toggle and map it to F8', '2013-07-10', '2013-07-10'),
(32, 0, 'Cool MacVIM settings\n', 'if has(&quot;gui_macvim&quot;)\r\n    set transparency=15\r\n    set guifont=Monaco:h10\r\n    set noantialias\r\nendif', '2013-07-10', '2013-07-10'),
(33, 0, 'Custom File Templates\n', 'au! BufNewFile * silent! 0r $HOME/.vim/skel/template.%:e', '2013-07-10', '2013-07-10'),
(34, 0, 'cd into the dir that the file is in\n', 'autocmd BufEnter * execute &quot;chdir &quot;.escape(expand(&quot;%:p:h&quot;), '' '')', '2013-07-10', '2013-07-10'),
(35, 0, 'Fix indenting without moving cursor\n', 'noremap &lt;F1&gt; mzgg=G`zzz', '2013-07-10', '2013-07-10'),
(36, 0, 'Restore cursor position when opening file\n', 'augroup JumpCursorOnEdit\r\nau!\r\nautocmd BufReadPost *\r\n\\ if expand(&quot;&lt;afile&gt;:p:h&quot;) !=? $TEMP |\r\n\\   if line(&quot;''\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;''\\&quot;&quot;) &lt;= line(&quot;$&quot;) |\r\n\\     let JumpCursorOnEdit_foo = line(&quot;''\\&quot;&quot;) |\r\n\\     let b:doopenfold = 1 |\r\n\\     if (foldlevel(JumpCursorOnEdit_foo) &gt; foldlevel(JumpCursorOnEdit_foo - 1)) |\r\n\\        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |\r\n\\        let b:doopenfold = 2 |\r\n\\     endif |\r\n\\     exe JumpCursorOnEdit_foo |\r\n\\   endif |\r\n\\ endif\r\n&quot; Need to postpone using &quot;zv&quot; until after reading the modelines.\r\nautocmd BufWinEnter *\r\n\\ if exists(&quot;b:doopenfold&quot;) |\r\n\\   exe &quot;normal zv&quot; |\r\n\\   if(b:doopenfold &gt; 1) |\r\n\\       exe  &quot;+&quot;.1 |\r\n\\   endif |\r\n\\   unlet b:doopenfold |\r\n\\ endif\r\naugroup END', '2013-07-10', '2013-07-10'),
(37, 0, 'toggle a boolean option\n', 'nmap &lt;silent&gt; &lt;leader&gt;h :set hlsearch! hlsearch?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;l :set list! list?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;n :set number! number?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;p :set paste! paste?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;w :set wrap! wrap?&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(38, 0, 'Select all text in current buffer\n', '&quot; select all\r\nmap &lt;Leader&gt;a ggVG', '2013-07-10', '2013-07-10'),
(39, 0, 'Mappings for Tab Management\n', 'nnoremap &lt;Leader&gt;tc :tabc&lt;return&gt;\r\nnnoremap &lt;Leader&gt;tn :tabn&lt;return&gt;\r\nnnoremap &lt;Leader&gt;tp :tabp&lt;return&gt;\r\nnnoremap &lt;Leader&gt;te :tabe&lt;space&gt;', '2013-07-10', '2013-07-10'),
(40, 0, 'Run Python Code from Vim \n', 'map &lt;f5&gt; :w &lt;CR&gt;!clear &lt;CR&gt;:!python % &lt;CR&gt;', '2013-07-10', '2013-07-10'),
(41, 0, 'Use arrow keys to move text\n', 'noremap &lt;Up&gt;     ddkP\r\nnoremap &lt;Down&gt;   ddp \r\nnoremap &lt;Left&gt;   &lt;&lt;  \r\nnoremap &lt;Right&gt;  &gt;&gt;', '2013-07-10', '2013-07-10'),
(42, 0, 'Use file basename for the Tab label\n', 'function GuiTabLabel()\r\n      let bufnrlist = tabpagebuflist(v:lnum)\r\n      let bufId = bufnrlist[tabpagewinnr(v:lnum) - 1]\r\n      let fn = bufname(bufId)\r\n      let lastSlash = strridx(fn, ''/'')\r\n      return strpart(fn, lastSlash+1, strlen(fn))\r\nendfunction\r\n\r\nif v:version &gt;= 700\r\n      set guitablabel=%{GuiTabLabel()}\r\nendif', '2013-07-10', '2013-07-10'),
(43, 0, 'Toggle Any Vim Option\n', 'Vim lets you toggle any option with\r\n:set inv{option}\r\n\r\nUse this mapping to toggle line numbers, for example\r\nnmap &lt;leader&gt;l :set invnu&lt;CR&gt;\r\n\r\n:help options', '2013-07-10', '2013-07-10'),
(44, 0, 'Remap leader to comma\n', 'let mapleader = &quot;,&quot;', '2013-07-10', '2013-07-10'),
(45, 0, 'Map ii to Esc\n', 'imap ii &lt;Esc&gt;', '2013-07-10', '2013-07-10'),
(46, 0, 'Force files ending in one extension to be treated as if they ended with another extension\n', 'au BufRead,BufNewFile *.sls set filetype=yaml', '2013-07-10', '2013-07-10'),
(47, 0, 'Hilight trailing whitespace\n', ':highlight TrailWhitespace ctermbg=red guibg=red\r\n:match TrailWhitespace /\\s\\+$\\| \\+\\ze\\t/', '2013-07-10', '2013-07-10'),
(48, 0, 'Set useful status line\n', 'set statusline=%F%m%r%h%w\\ [FORMAT=%{&amp;ff}]\\ [TYPE=%Y]\\ [ASCII=\\%03.3b]\\ [HEX=\\%02.2B]\\ [POS=%04l,%04v][%p%%]\\ [LEN=%L]', '2013-07-10', '2013-07-10'),
(49, 0, 'Remember where you were the last time you edited the file\n', 'au BufReadPost * if line(&quot;''\\&quot;&quot;) &gt; 0|if line(&quot;''\\&quot;&quot;) &lt;= line(&quot;$&quot;)|exe(&quot;norm ''\\&quot;&quot;)|else|exe &quot;norm $&quot;|endif|endif', '2013-07-10', '2013-07-10'),
(50, 0, 'Show syntax highlighting groups for word under cursor\n', 'nnoremap &lt;silent&gt; &lt;F10&gt; :call &lt;SID&gt;SynStack()&lt;CR&gt;\r\nfunction! &lt;SID&gt;SynStack()\r\n  if !exists(&quot;*synstack&quot;)\r\n    return\r\n  endif\r\n  echo map(synstack(line(''.''), col(''.'')), ''synIDattr(v:val, &quot;name&quot;)'')\r\nendfunc', '2013-07-10', '2013-07-10'),
(51, 0, 'Moving around through wrapped lines\n', 'vmap &lt;C-j&gt; gj\r\nvmap &lt;C-k&gt; gk\r\nvmap &lt;C-4&gt; g$\r\nvmap &lt;C-6&gt; g^\r\nvmap &lt;C-0&gt; g^\r\nnmap &lt;C-j&gt; gj\r\nnmap &lt;C-k&gt; gk\r\nnmap &lt;C-4&gt; g$\r\nnmap &lt;C-6&gt; g^\r\nnmap &lt;C-0&gt; g^', '2013-07-10', '2013-07-10'),
(52, 0, 'Visually Select by Words like windoze\n', 'imap &lt;C-S-Right&gt; &lt;C-O&gt;w\r\nvmap &lt;C-S-Right&gt; w\r\nnmap &lt;C-S-Right&gt; vw\r\n\r\nimap &lt;C-S-Left&gt; &lt;C-O&gt;b\r\nvmap &lt;C-S-Left&gt; b\r\nnmap &lt;C-S-Left&gt; vb', '2013-07-10', '2013-07-10'),
(53, 0, 'Wipe out all buffers\n', 'nmap &lt;silent&gt; &lt;leader&gt;bwa :1,9000bwipeout&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(54, 0, 'quick ls\n', 'nnoremap &lt;leader&gt;ls :ls&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(55, 0, 'Swap two words\n', 'nmap &lt;silent&gt; gw :s/\\(\\%#\\w\\+\\)\\(\\_W\\+\\)\\(\\w\\+\\)/\\3\\2\\1/&lt;CR&gt;`''', '2013-07-10', '2013-07-10'),
(56, 0, 'Shrink the current window to fit the number of lines in the buffer\n', 'nmap &lt;silent&gt; &lt;leader&gt;sw :execute &quot;:resize &quot; . line(''$'')&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(57, 0, 'toggle wrapping\n', 'nmap &lt;silent&gt; &lt;leader&gt;ww :set invwrap&lt;CR&gt;:set wrap?&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(58, 0, 'force period and parens to delineate words\n', 'set iskeyword-=\\.\r\nset iskeyword-=\\(\r\nset iskeyword-=\\)', '2013-07-10', '2013-07-10'),
(59, 0, 'greek digraphs\n', 'imap &lt;c-l&gt;&lt;c-a&gt; &lt;c-k&gt;a* &quot; Alpha\r\nimap &lt;c-l&gt;&lt;c-b&gt; &lt;c-k&gt;b* &quot; Beta\r\nimap &lt;c-l&gt;&lt;c-g&gt; &lt;c-k&gt;g* &quot; Gamma\r\nimap &lt;c-l&gt;&lt;c-d&gt; &lt;c-k&gt;d* &quot; Delta\r\nimap &lt;c-l&gt;&lt;c-e&gt; &lt;c-k&gt;e* &quot; Epslion\r\nimap &lt;c-l&gt;&lt;c-l&gt; &lt;c-k&gt;l* &quot; Lambda\r\nimap &lt;c-l&gt;&lt;c-y&gt; &lt;c-k&gt;y* &quot; Eta\r\nimap &lt;c-l&gt;&lt;c-h&gt; &lt;c-k&gt;h* &quot; Theta\r\nimap &lt;c-l&gt;&lt;c-m&gt; &lt;c-k&gt;m* &quot; Mu\r\nimap &lt;c-l&gt;&lt;c-r&gt; &lt;c-k&gt;r* &quot; Rho\r\nimap &lt;c-l&gt;&lt;c-p&gt; &lt;c-k&gt;p* &quot; Pi\r\nimap &lt;c-l&gt;&lt;c-f&gt; &lt;c-k&gt;f* &quot; Phi', '2013-07-10', '2013-07-10'),
(60, 0, 'Fix common spelling mistakes\n', 'iab teh       the\r\niab Teh       The', '2013-07-10', '2013-07-10'),
(61, 0, 'find merge conflict markers\n', 'nmap &lt;silent&gt; &lt;leader&gt;cf &lt;ESC&gt;/\\v^[&lt;=&gt;]{7}( .*\\|$)&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(62, 0, 'Auto-clean fugitive buffers\n', 'au BufReadPost fugitive://* set bufhidden=delete', '2013-07-10', '2013-07-10'),
(63, 0, 'Add a GUID to the current line \n', 'imap &lt;C-J&gt;d &lt;C-r&gt;=substitute(system(&quot;uuidgen&quot;), ''.$'', '''', ''g'')&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(64, 0, 'vimgrep shortcuts for current file\n', '&quot; Search the current file for what''s currently in the search register and display matches\r\nnmap &lt;silent&gt; &lt;leader&gt;gs :vimgrep /&lt;C-r&gt;// %&lt;CR&gt;:ccl&lt;CR&gt;:cwin&lt;CR&gt;&lt;C-W&gt;J:nohls&lt;CR&gt;\r\n\r\n&quot; Search the current file for the word under the cursor and display matches\r\nnmap &lt;silent&gt; &lt;leader&gt;gw :vimgrep /&lt;C-r&gt;&lt;C-w&gt;/ %&lt;CR&gt;:ccl&lt;CR&gt;:cwin&lt;CR&gt;&lt;C-W&gt;J:nohls&lt;CR&gt;\r\n\r\n&quot; Search the current file for the WORD under the cursor and display matches\r\nnmap &lt;silent&gt; &lt;leader&gt;gW :vimgrep /&lt;C-r&gt;&lt;C-a&gt;/ %&lt;CR&gt;:ccl&lt;CR&gt;:cwin&lt;CR&gt;&lt;C-W&gt;J:nohls&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(65, 0, 'Yank entire file into system register\n', 'nnoremap &lt;silent&gt; &lt;F2&gt; :%y*&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(66, 0, 'Replace entire buffer with system register contents\n', 'nnoremap &lt;silent&gt; &lt;S-F2&gt; :normal ggdG&quot;*PGgg&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(67, 0, 'Quick insertion of newline in normal mode\n', 'nnoremap &lt;silent&gt; &lt;CR&gt; :put=''''&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(68, 0, 'A more handy Esc\n', 'inoremap jj &lt;Esc&gt; &quot; Esc is so far away without this mapping...', '2013-07-10', '2013-07-10'),
(69, 0, 'Scroll the viewpoint faster\n', '&quot; Scroll the viewpoint faster\r\nnnoremap &lt;C-e&gt; 3&lt;C-e&gt; \r\nnnoremap &lt;C-y&gt; 3&lt;C-y&gt;', '2013-07-10', '2013-07-10'),
(70, 0, 'An informative status line\n', 'set statusline=%F%m%r%h%w\\ [type=%Y]\\ [%p%%]\\ [len=%L]\r\nset laststatus=2 &quot; Always show the statusline on the 2nd last row', '2013-07-10', '2013-07-10'),
(71, 0, 'adjust indentation width on the fly\n', '&quot; soft tabbing at 2, 4 and 8 spaces of width &quot;\r\nnnoremap &lt;leader&gt;2 &lt;esc&gt;:set expandtab tabstop=2 softtabstop=2 shiftwidth=2&lt;cr&gt;\r\nnnoremap &lt;leader&gt;4 &lt;esc&gt;:set expandtab tabstop=4 softtabstop=4 shiftwidth=4&lt;cr&gt;\r\nnnoremap &lt;leader&gt;8 &lt;esc&gt;:set expandtab tabstop=8 softtabstop=8 shiftwidth=8&lt;cr&gt;\r\n&quot; hard tabbing at 2, for and 8 spaces of width &quot;\r\nnnoremap &lt;leader&gt;&lt;leader&gt;2 &lt;esc&gt;:set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2&lt;cr&gt;\r\nnnoremap &lt;leader&gt;&lt;leader&gt;4 &lt;esc&gt;:set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4&lt;cr&gt;\r\nnnoremap &lt;leader&gt;&lt;leader&gt;8 &lt;esc&gt;:set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(72, 0, 'Automatically add multiple-inclusion guards to new C headers\n', 'function! s:headertemplate(name)\r\n    let guard=toupper(substitute(substitute(a:name, ''[^[:alnum:]]'', ''_'', ''g''), ''^[^[:alpha:]_]'', ''_&amp;'', ''''))\r\n    return &quot;#ifndef &quot; . guard . &quot;\\n#define &quot; . guard . &quot;\\n\\n\\n\\n#endif /* &quot; . guard . &quot; */&quot;\r\nendfunction\r\nautocmd BufNewFile *.h s@^$@\\=s:headertemplate(expand(''&lt;afile&gt;:t''))@ | 4', '2013-07-10', '2013-07-10'),
(73, 0, 'Swap &quot;jump to mark&quot; keys for convenience\n', '&quot; swap ` with '' because the '' key is closer and jumping to the character is more useful\r\nnnoremap '' `\r\nnnoremap ` ''', '2013-07-10', '2013-07-10'),
(74, 0, 'Easily expand/collapse all folds\n', '&quot; Folding\r\nnnoremap &lt;leader&gt;z &lt;esc&gt;:set foldlevel=10000&lt;cr&gt;\r\nnnoremap &lt;leader&gt;Z &lt;esc&gt;:set foldlevel=-10000&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(75, 0, 'mode switches between absolute and relative line numbers\n', '&quot; absolute line numbers in insert mode, relative otherwise for easy movement\r\nau InsertEnter * :set nu\r\nau InsertLeave * :set rnu', '2013-07-10', '2013-07-10'),
(76, 0, 'Set custom settings per filetype\n', 'set tabstop=2\r\nset shiftwidth=2\r\nset softtabstop=2\r\n\r\nif has(&quot;autocmd&quot;)\r\n  autocmd FileType python,xml,html,htmldjango setlocal tabstop=4\r\n  autocmd FileType python,xml,html,htmldjango setlocal shiftwidth=4\r\n  autocmd FileType python,xml,html,htmldjango setlocal softtabstop=4\r\nendif', '2013-07-10', '2013-07-10'),
(77, 0, 'Save file on focus lost\n', 'au FocusLost * :wa', '2013-07-10', '2013-07-10'),
(78, 0, 'Clear trailing white space\n', 'nnoremap &lt;silent&gt; &lt;C-k&gt; :let _s=@/&lt;Bar&gt;:%s/\\s\\+$//e&lt;Bar&gt;:let @/=_s&lt;Bar&gt;:nohl&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(79, 0, 'Use arrow key to change buffer\n', ':noremap &lt;left&gt; :bp&lt;CR&gt;\r\n:noremap &lt;right&gt; :bn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(80, 0, 'Open file under cursor in vertical split window\n', 'map &lt;Leader&gt;f :vertical wincmd f&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(81, 0, 'Run Rspec example under cursor\n', 'autocmd Filetype,BufNewFile *_spec.rb nmap &lt;Leader&gt;r :!bundle exec rspec %&lt;CR&gt;\r\nautocmd Filetype,BufNewFile *_spec.rb nmap &lt;Leader&gt;R :exe &quot;!bundle exec rspec %\\:&quot; . line(&quot;.&quot;)&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(82, 0, 'Home &amp; End with capitalized directions\n', '&quot; Go to home and end using capitalized directions\r\nnoremap H ^\r\nnoremap L $', '2013-07-10', '2013-07-10'),
(83, 0, 'Toggle paredit\n', 'command! Ptoggle call PareditToggle()', '2013-07-10', '2013-07-10'),
(84, 0, 'Drag Current Line/s Vertically\n', 'noremap &lt;A-j&gt; :m+&lt;CR&gt;\r\nnoremap &lt;A-k&gt; :m-2&lt;CR&gt;\r\ninoremap &lt;A-j&gt; &lt;Esc&gt;:m+&lt;CR&gt;\r\ninoremap &lt;A-k&gt; &lt;Esc&gt;:m-2&lt;CR&gt;\r\nvnoremap &lt;A-j&gt; :m''&gt;+&lt;CR&gt;gv\r\nvnoremap &lt;A-k&gt; :m-2&lt;CR&gt;gv', '2013-07-10', '2013-07-10'),
(85, 0, 'Search and replace word under cursor\n', '&quot; Search and replace word under cursor (,;)\r\n:nnoremap &lt;leader&gt;; :%s/\\&lt;&lt;C-r&gt;&lt;C-w&gt;\\&gt;//&lt;Left&gt;', '2013-07-10', '2013-07-10'),
(86, 0, 'Scroll before reaching the edge\n', '&quot; ****************** SCROLLING *********************  \r\n\r\nset scrolloff=8         &quot; Number of lines from vertical edge to start scrolling\r\nset sidescrolloff=15 &quot; Number of cols from horizontal edge to start scrolling\r\nset sidescroll=1       &quot; Number of cols to scroll at a time', '2013-07-10', '2013-07-10'),
(87, 0, 'Refresh syntax highlighting\n', '&quot; Ctrl-L recolors the screen when it gets confused.\r\nnoremap &lt;c-l&gt; &lt;c-l&gt;:syntax sync fromstart&lt;CR&gt;\r\ninoremap &lt;c-l&gt; &lt;esc&gt;&lt;c-l&gt;:syntax sync fromstart&lt;CR&gt;a', '2013-07-10', '2013-07-10'),
(88, 0, 'leader config\n', '&quot;change leader key\r\nlet mapleader='',''\r\n&quot;ever notice a slight lag after typing the leader key + command? This lowers the timeout.\r\nset timeoutlen=250', '2013-07-10', '2013-07-10'),
(89, 0, 'Next/previous in quickfix list\n', 'nnoremap &lt;c-n&gt; :cnext&lt;CR&gt;\r\nnnoremap &lt;c-p&gt; :cprevious&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(90, 0, 'Set separate colorscheme for terminal and gui\n', 'set background=dark\r\n&quot; Set base color scheme, will be used by term\r\ncolorscheme elflord\r\n&quot; If Vim enters guimode, set 256 color mode and change the colorscheme\r\nau GUIEnter * set t_Co=256\r\nau GUIEnter * colorscheme zenburn', '2013-07-10', '2013-07-10'),
(91, 0, 'Remove any trailing whitespace that is in the file\n', 'autocmd BufWrite * if ! &amp;bin | silent! %s/\\s\\+$//ge | endif', '2013-07-10', '2013-07-10'),
(92, 0, 'Try different potential backup directories\n', 'set backupdir=~/.vim-tmp,~/tmp,/var/tmp,$HOME/Local\\ Settings/Temp', '2013-07-10', '2013-07-10'),
(93, 0, 'Ack Motions\n', 'nnoremap &lt;silent&gt; \\a :set opfunc=&lt;SID&gt;AckMotion&lt;CR&gt;g@\r\nxnoremap &lt;silent&gt; \\a :&lt;C-U&gt;call &lt;SID&gt;AckMotion(visualmode())&lt;CR&gt;\r\n\r\nfunction! s:CopyMotionForType(type)\r\n    if a:type ==# ''v''\r\n        silent execute &quot;normal! `&lt;&quot; . a:type . &quot;`&gt;y&quot;\r\n    elseif a:type ==# ''char''\r\n        silent execute &quot;normal! `[v`]y&quot;\r\n    endif\r\nendfunction\r\n\r\nfunction! s:AckMotion(type) abort\r\n    let reg_save = @@\r\n\r\n    call s:CopyMotionForType(a:type)\r\n\r\n    execute &quot;normal! :Ack! --literal &quot; . shellescape(@@) . &quot;\\&lt;cr&gt;&quot;\r\n\r\n    let @@ = reg_save\r\nendfunction', '2013-07-10', '2013-07-10'),
(94, 0, 'Annotate mercurial changes of visual lines \n', 'vmap ,ga :&lt;C-U&gt;!hg annotate -udqc % \\| sed -n &lt;C-R&gt;=line(&quot;''&lt;&quot;) &lt;CR&gt;,&lt;C-R&gt;=line(&quot;''&gt;&quot;) &lt;CR&gt;p &lt;CR&gt;', '2013-07-10', '2013-07-10'),
(95, 0, 'Next buffer in new vertical split\n', 'nmap &lt;leader&gt;vl :rightbelow vert sbn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(96, 0, 'List backups of current file in the current directory\n', 'map &lt;leader&gt;b :!ls -l %*&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(97, 0, 'turn off normal arrow keys for navigation\n', 'noremap &lt;Up&gt; &lt;nop&gt;\r\nnoremap &lt;Down&gt; &lt;nop&gt;\r\nnoremap &lt;Left&gt; &lt;nop&gt;\r\nnoremap &lt;Right&gt; &lt;nop&gt;', '2013-07-10', '2013-07-10'),
(98, 0, 'Make v cycle through visual modes\n', '&quot; override v in visual mode to cycle modes\r\nvmap v :call CycleVisualMode()&lt;CR&gt;\r\nlet s:CycleVisualMode_running=0\r\nfunction! CycleVisualMode() range\r\n    let m = visualmode()\r\n    if m ==# ''v''\r\n        normal gvV\r\n    elseif m ==# ''V''\r\n        execute &quot;normal gv\\&lt;C-v&gt;&quot;\r\n    elseif m != ''''\r\n        vunmap v\r\n        normal gvv\r\n        vmap v :call CycleVisualMode()&lt;CR&gt;\r\n    endif\r\nendfunction', '2013-07-10', '2013-07-10'),
(99, 0, 'Indent/Outdent like Textmate\n', '&quot;bind command-] to indent\r\nnmap &lt;D-]&gt; &gt;&gt;\r\nvmap &lt;D-]&gt; &gt;gv\r\nimap &lt;D-]&gt; &lt;C-O&gt;&gt;&gt;\r\n\r\n&quot;bind command-[ to outdent\r\nnmap &lt;D-[&gt; &lt;&lt;\r\nvmap &lt;D-[&gt; &lt;gv\r\nimap &lt;D-[&gt; &lt;C-O&gt;&lt;&lt;', '2013-07-10', '2013-07-10'),
(100, 0, 'Comment like Textmate\n', 'nmap &lt;D-/&gt; &lt;leader&gt;ci &lt;CR&gt;\r\nvmap &lt;D-/&gt; &lt;leader&gt;ci &lt;CR&gt;\r\nimap &lt;D-/&gt; &lt;C-O&gt;&lt;leader&gt;ci', '2013-07-10', '2013-07-10'),
(101, 0, 'buffer navigation\n', '&quot; from https://github.com/eiro/rcfiles\r\n&quot; (consider set hidden)\r\nnoremap &lt;down&gt; :blast!&lt;cr&gt;\r\nnoremap &lt;right&gt; :bnext!&lt;cr&gt;\r\nnoremap &lt;left&gt; :bprevious!&lt;cr&gt;\r\nnoremap &lt;up&gt; :ls&lt;cr&gt;:buffer', '2013-07-10', '2013-07-10'),
(102, 0, 'Hilight active line \n', 'autocmd BufEnter * setlocal cursorline                                          \r\nautocmd BufWinLeave * setlocal nocursorline', '2013-07-10', '2013-07-10'),
(103, 0, 'Disable paste mode when leaving Insert Mode\n', 'au InsertLeave * set nopaste', '2013-07-10', '2013-07-10'),
(104, 0, 'From CoffeeScript to compiled JavaScript line\n', '&quot; :C&lt;line number&gt;                                                               \r\n&quot; Compile CoffeeScript buffer and open it in scratch buffer on given line       \r\n&quot; number                                                                        \r\ncommand -nargs=1 C CoffeeCompile | :&lt;args&gt;', '2013-07-10', '2013-07-10'),
(105, 0, 'Clear search highlighting with ESC\n', 'nnoremap &lt;esc&gt; :noh&lt;cr&gt;&lt;esc&gt;', '2013-07-10', '2013-07-10'),
(106, 0, 'Show Git diff in window split when commiting\n', 'autocmd FileType gitcommit DiffGitCached | wincmd p', '2013-07-10', '2013-07-10'),
(107, 0, 'Swap areas of text\n', 'vnoremap &lt;C-X&gt; &lt;Esc&gt;`.``gvP``P', '2013-07-10', '2013-07-10'),
(108, 0, 'Useful Abbreviations\n', '&quot; Usual Typos\r\nabbr teh the\r\nabbr hign hing\r\nabbr nign ning\r\nabbr lenght length\r\nabbr heigth height\r\nabbr widht width\r\n\r\n&quot; General text\r\nabbr lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis vulputate orci vitae justo sodales sollicitudin ornare augue ultricies. Proin volutpat, erat gravida congue scelerisque, dui leo malesuada ipsum, sit amet euismod turpis orci ut nunc. Mauris quam turpis, consectetur quis pulvinar vel, imperdiet posuere enim. Quisque nibh diam, eleifend quis mattis id, mollis tempus ipsum.\r\n\r\n&quot; Java\r\nabbr psvm public static void main(String[] args){&lt;CR&gt;}&lt;esc&gt;O\r\nabbr sout System.out.println(&quot;&quot;);&lt;esc&gt;2hi\r\nabbr psfs public static final String', '2013-07-10', '2013-07-10'),
(109, 0, 'Insert blank lines without going into insert mode\n', 'nmap t o&lt;ESC&gt;k\r\nnmap T O&lt;ESC&gt;j', '2013-07-10', '2013-07-10'),
(110, 0, 'Count words for LaTeX documents\n', 'nmap &lt;silent&gt; &lt;leader&gt;lwc :w&lt;CR&gt; :!detex % \\| wc -w&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(111, 0, 'Avoid Cmd-Tab/Q Perils\n', '# Can''t remap all menus in vimrc (MacVim menu), and other issues.\r\n# http://superuser.com/questions/249448/macvim-re-map-command-key-combinations-like-d-f', '2013-07-10', '2013-07-10'),
(112, 0, 'Shortcut save file\n', 'noremap &lt;C-S&gt; :w&lt;CR&gt;\r\nnoremap &lt;C-S&gt; &lt;ESC&gt;:w&lt;CR&gt;&lt;Insert&gt;', '2013-07-10', '2013-07-10'),
(113, 0, 'The Smash Escape\n', 'inoremap jk &lt;Esc&gt;\r\ninoremap kj &lt;Esc&gt;', '2013-07-10', '2013-07-10'),
(114, 0, 'Switch back to last file in buffer\n', 'nmap &lt;leader&gt;&lt;leader&gt; :b#&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(115, 0, 'go to middle of line\n', 'nnoremap gm :call cursor(0, len(getline(''.''))/2)&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(116, 0, 'Close a buffer quickly\n', 'noremap &lt;silent&gt; &lt;F3&gt; :bd!&lt;CR&gt;\r\nvnoremap &lt;silent&gt; &lt;F3&gt; &lt;C-C&gt;:bd!&lt;CR&gt;\r\ninoremap &lt;silent&gt; &lt;F3&gt; &lt;C-O&gt;:bd!&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(117, 0, 'autoclose completion window\n', '&quot;autoclose preview window\r\nif has(&quot;autocmd&quot;)\r\n    autocmd CursorMovedI * if pumvisible() == 0|pclose|endif\r\n    autocmd InsertLeave * if pumvisible() == 0|pclose|endif\r\nendif', '2013-07-10', '2013-07-10'),
(118, 0, 'Avoiding trailing white-space in Ruby files\n', 'autocmd BufWritePre {*.rb,*.js,*.coffee,*.scss,*.haml} :%s/\\s\\+$//e', '2013-07-10', '2013-07-10'),
(119, 0, 'Exit with keeping screen\n', 'nmap &lt;silent&gt; gZZ :set t_te= t_ti= &lt;cr&gt;:quit&lt;cr&gt;:set t_te&amp; t_ti&amp;&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(120, 0, 'Move/copy lines to the cursor postition \n', 'map &lt;Leader&gt;y	GY``kp\r\nmap &lt;Leader&gt;d	Gdd``kp', '2013-07-10', '2013-07-10'),
(121, 0, 'Auto indent after pasting\n', 'nnoremap &lt;leader&gt;p p                                                               \r\nnnoremap &lt;leader&gt;P P                                                               \r\nnnoremap p p''[v'']=                                                                 \r\nnnoremap P P''[v'']=', '2013-07-10', '2013-07-10'),
(122, 0, 'Toggle Relative Number\n', 'if exists(&quot;&amp;relativenumber&quot;)                                                    \r\n    set relativenumber\r\n    silent! autocmd InsertEnter * :set number                                   \r\n    silent! autocmd InsertLeave * :set relativenumber                           \r\n    silent! au FocusLost * :set number                                          \r\n    silent! au FocusGained * :set relativenumber                                \r\nendif', '2013-07-10', '2013-07-10'),
(123, 0, 'Restore cursor to last position on file open\n', '&quot; Tell vim to remember certain things when we exit\r\n&quot;  ''10  :  marks will be remembered for up to 10 previously edited files\r\n&quot;  &quot;100 :  will save up to 100 lines for each register\r\n&quot;  :20  :  up to 20 lines of command-line history will be remembered\r\n&quot;  %    :  saves and restores the buffer list\r\n&quot;  n... :  where to save the viminfo files\r\nset viminfo=''10,\\&quot;100,:20,%,n~/.viminfo\r\n\r\nfunction! ResCur()\r\n  if line(&quot;''\\&quot;&quot;) &lt;= line(&quot;$&quot;)\r\n    normal! g`&quot;\r\n    return 1\r\n  endif\r\nendfunction\r\n\r\naugroup resCur\r\n  autocmd!\r\n  autocmd BufWinEnter * call ResCur()\r\naugroup END', '2013-07-10', '2013-07-10'),
(124, 0, 'Highlight Trailing Whitespace\n', 'syntax on\r\nhighlight ExtraWhitespace ctermbg=darkgreen guibg=lightgreen                    \r\nautocmd Syntax * syn match ExtraWhitespace /\\s\\+$\\| \\+\\ze\\t/', '2013-07-10', '2013-07-10'),
(125, 0, 'Show Tabs and Carriage Returns\n', 'set list\r\nset listchars=tab:▸\\ ,eol:¬', '2013-07-10', '2013-07-10'),
(126, 0, 'Tabbing selected section\n', 'vmap &lt;Tab&gt; &gt;gv\r\nvmap &lt;S-Tab&gt; &lt;gv', '2013-07-10', '2013-07-10'),
(127, 0, 'Write with sudo\n', 'cnoremap w!! w !sudo tee % &gt;/dev/null', '2013-07-10', '2013-07-10'),
(128, 0, 'Expand path of current file in command mode\n', 'cnoremap %% &lt;C-R&gt;=expand(''%:h'').''/''&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(129, 0, 'Search/search word under cursor\n', 'nnoremap &lt;leader&gt;s :%s//&lt;left&gt;\r\nnnoremap &lt;Leader&gt;S :%s/&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;//c&lt;left&gt;&lt;left&gt;', '2013-07-10', '2013-07-10'),
(130, 0, 'Let cursor line always centered\n', 'set scrolloff=999', '2013-07-10', '2013-07-10'),
(131, 0, 'Show where replace area ends\n', 'set cpoptions+=$', '2013-07-10', '2013-07-10'),
(132, 0, 'Only have cursorline in current window\n', 'autocmd WinLeave * set nocursorline\r\nautocmd WinEnter * set cursorline', '2013-07-10', '2013-07-10'),
(133, 0, 'quick access to the NERDTree file browser\n', '&quot; https://github.com/scrooloose/nerdtree to download\r\n&quot; \\] to toggle the file browser\r\nnoremap &lt;silent&gt;\\] :NERDTreeToggle&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(134, 0, 'Easier increment/decrement\n', 'nnoremap + &lt;C-a&gt;\r\nnnoremap - &lt;C-x&gt;', '2013-07-10', '2013-07-10'),
(135, 0, 'Reformat/reflow a paragraph of text\n', 'set formatoptions=tcroql\r\nnnoremap Q gqap', '2013-07-10', '2013-07-10'),
(136, 0, 'Insert one character\n', 'nnoremap &lt;C-i&gt; :exec &quot;normal i&quot;.nr2char(getchar()).&quot;\\e&quot;&lt;CR&gt;\r\nnnoremap &lt;C-i&gt;a :exec &quot;normal a&quot;.nr2char(getchar()).&quot;\\e&quot;&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(137, 0, 'Switch between buffers\n', 'nnoremap &lt;silent&gt; &lt;C-PageUp&gt; :bp&lt;CR&gt;\r\nnnoremap &lt;silent&gt; &lt;C-PageDown&gt; :bn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(138, 0, 'Restore messed up Vim\n', 'map &lt;F5&gt; :redraw! \\| :noh \\| &lt;cr&gt;&lt;c-w&gt;=', '2013-07-10', '2013-07-10'),
(139, 0, 'Show current file in NERDTree\n', 'map &lt;silent&gt; &lt;C-s&gt; :NERDTree&lt;CR&gt;&lt;C-w&gt;p:NERDTreeFind&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(140, 0, 'Format Perl source with Perltidy\n', 'nmap &lt;F4&gt; :%!perltidy&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(141, 0, 'Map vim tabs to function keys\n', 'nmap &lt;F6&gt; :tabe \r\nnmap &lt;F7&gt; :tabp&lt;CR&gt;\r\nnmap &lt;F8&gt; :tabn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(142, 0, 'Run Perl script\n', 'nmap &lt;F5&gt; :!perl %&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(143, 0, 'Use Command-left/right to change buffer\n', 'noremap &lt;D-left&gt;  :bp&lt;CR&gt;\r\nnoremap &lt;D-right&gt; :bn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(144, 0, 'Hide toolbar and scrollbars in MacVim\n', 'set guioptions-=T\r\nset guioptions-=r', '2013-07-10', '2013-07-10'),
(145, 0, 'Capital W/Q same as w/q in command mode\n', 'cnoreabbrev W w\r\ncnoreabbrev Q q', '2013-07-10', '2013-07-10'),
(146, 0, 'Space to toggle folds\n', 'nnoremap &lt;Space&gt; za\r\nvnoremap &lt;Space&gt; za', '2013-07-10', '2013-07-10'),
(147, 0, 'Toggle between normal and and relative line numbers on &lt;leader&gt;l\n', 'nnoremap &lt;leader&gt;l :call ToggleRelativeAbsoluteNumber()&lt;CR&gt;\r\nfunction! ToggleRelativeAbsoluteNumber()\r\n  if &amp;number\r\n    set relativenumber\r\n  else\r\n    set number\r\n  endif\r\nendfunction', '2013-07-10', '2013-07-10'),
(148, 0, 'Copy current file path into system clipboard\n', 'nnoremap &lt;silent&gt; &lt;leader&gt;cf :let @* = expand(&quot;%:p&quot;)&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(149, 0, 'Resize splits when the window is resized\n', 'au VimResized * exe &quot;normal! \\&lt;c-w&gt;=&quot;', '2013-07-10', '2013-07-10'),
(150, 0, 'Save when losing focus\n', 'au FocusLost * :wa', '2013-07-10', '2013-07-10'),
(151, 0, 'Open file under cursor in new tab\n', 'map &lt;F9&gt; &lt;Esc&gt;&lt;C-W&gt;gF&lt;CR&gt;:tabm&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(152, 0, 'Resize splits when the window is resized\n', 'au VimResized * exe &quot;normal! \\&lt;c-w&gt;=&quot;', '2013-07-10', '2013-07-10'),
(153, 0, 'Spellcheck Git commit messages\n', 'autocmd BufRead COMMIT_EDITMSG setlocal spell!', '2013-07-10', '2013-07-10'),
(154, 0, 'Refresh Command-T index\n', 'map &lt;Leader&gt;&lt;D-t&gt; :CommandTFlush&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(155, 0, 'Remove Trailing Whitespace and return cursor position\n', '&quot;From http://vimcasts.org/episodes/tidying-whitespace/\r\n&quot;Preserves/Saves the state, executes a command, and returns to the saved state\r\nfunction! Preserve(command)\r\n  &quot; Preparation: save last search, and cursor position.\r\n  let _s=@/\r\n  let l = line(&quot;.&quot;)\r\n  let c = col(&quot;.&quot;)\r\n  &quot; Do the business:\r\n  execute a:command\r\n  &quot; Clean up: restore previous search history, and cursor position\r\n  let @/=_s\r\n  call cursor(l, c)\r\nendfunction\r\n&quot;strip all trailing white space\r\nnnoremap &lt;silent&gt; &lt;leader&gt;ws  :call Preserve(&quot;%s/\\\\s\\\\+$//e&quot;)&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(156, 0, 'Insert blank line below cursor in Normal Mode\n', 'nnoremap &lt;CR&gt; mpo&lt;ESC&gt;`p', '2013-07-10', '2013-07-10'),
(157, 0, 'Enable persistent undo\n', 'if exists(&quot;+undofile&quot;)\r\n    set udf\r\n    set undodir=~/.vimundo\r\nendif', '2013-07-10', '2013-07-10'),
(158, 0, 'Map Caps-Lock to Ctrl\n', 'Map Caps Lock to Ctrl in your OS. Trust me.', '2013-07-10', '2013-07-10'),
(159, 0, 'Reuse status as window title\n', 'let &amp;titlestring=&amp;statusline\r\nset titlestring+=\\ {%{v:servername}}', '2013-07-10', '2013-07-10'),
(160, 0, 'Revert file to previous state by time\n', '&quot;change file state to 15 minutes earlier&quot;\r\n:earlier 15m\r\n\r\n&quot;to jump to latest state&quot;\r\n:later', '2013-07-10', '2013-07-10'),
(161, 0, 'Insert Newlines Without Moving the Cursor\n', 'noremap &lt;S-ENTER&gt; O&lt;ESC&gt;j\r\nnoremap &lt;ENTER&gt; o&lt;ESC&gt;k', '2013-07-10', '2013-07-10'),
(162, 0, 'center buffer when opening files\n', '&quot; center buffer around cursor when opening files\r\nautocmd BufRead * normal zz', '2013-07-10', '2013-07-10'),
(163, 0, 'Test\n', '&quot; This is a test vimbit.\r\n\r\n&quot; It''s here so I can test some things with vimbit.', '2013-07-10', '2013-07-10'),
(164, 0, 'Expand Compressed HTML with Tidy\n', 'map &lt;leader&gt;td :%!tidy -q -config ~/.vim/tidy.conf --tidy-mark 0 2&gt;/dev/null&lt;CR&gt;&lt;ESC&gt;gg=G', '2013-07-10', '2013-07-10'),
(165, 0, 'Undo works after restarting vim\n', 'if exists(&quot;+undofile&quot;)\r\n  &quot; undofile - This allows you to use undos after exiting and restarting\r\n  &quot; This, like swap and backups, uses .vim-undo first, then ~/.vim/undo\r\n  &quot; :help undo-persistence\r\n  &quot; This is only present in 7.3+\r\n  if isdirectory($HOME . ''/.vim/undo'') == 0\r\n    :silent !mkdir -p ~/.vim/undo &gt; /dev/null 2&gt;&amp;1\r\n  endif\r\n  set undodir=./.vim-undo//\r\n  set undodir+=~/.vim/undo//\r\n  set undofile\r\nendif', '2013-07-10', '2013-07-10'),
(166, 0, 'Unify Mac cut-and-paste with vim\n', 'if version &gt;= 730 &amp;&amp; has(&quot;macunix&quot;)\r\n  &quot; Default yank and paste go to Mac''s clipboard\r\n  set clipboard=unnamed\r\nend', '2013-07-10', '2013-07-10'),
(167, 0, 'fast buffer switching\n', 'nmap &lt;F4&gt; :buffers&lt;CR&gt;buffer&lt;space&gt;', '2013-07-10', '2013-07-10'),
(168, 0, 'Open a Quickfix window for the last search\n', '&quot; Open a Quickfix window for the last search\r\nnnoremap &lt;silent&gt; &lt;leader&gt;/ :execute ''vimgrep /''.@/.''/g %''&lt;CR&gt;:copen&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(169, 0, 'Highlight all search matches\n', 'set hlsearch', '2013-07-10', '2013-07-10'),
(170, 0, 'No beep please\n', 'set noerrorbells\r\nset novisualbell\r\nautocmd VimEnter * set vb t_vb=', '2013-07-10', '2013-07-10'),
(171, 0, 'Save all open buffers when focus lost\n', 'autocmd BufLeave,FocusLost silent! wall', '2013-07-10', '2013-07-10'),
(172, 0, 'List characters\n', 'if has(&quot;gui&quot;)\r\n    set listchars=tab:»·\r\n    set list\r\nendif', '2013-07-10', '2013-07-10'),
(173, 0, 'Show text limit line\n', 'if (v:version &gt;=703)\r\n    set colorcolumn=100\r\n    hi ColorColumn ctermbg=red ctermfg=white guibg=#592929\r\nendif', '2013-07-10', '2013-07-10'),
(174, 0, 'Open new split windows to the right/bottom\n', 'set splitright splitbelow', '2013-07-10', '2013-07-10'),
(175, 0, 'JSON Formater \n', 'function! s:JSONize()\r\n    silent %!python -m json.tool\r\n    :exec&quot;:cal SetSyn(\\&quot;javascript\\&quot;)&quot;\r\nendfunction\r\n\r\ncommand! JSONize call s:JSONize() \r\n\r\nmap &lt;C-J&gt; :JSONize&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(176, 0, 'Map Q to repeat the last recorded macro\n', 'map Q @@', '2013-07-10', '2013-07-10'),
(177, 0, 'Add a line above or below current line without changing position or leaving mode\n', 'map &lt;leader&gt;o :set paste&lt;CR&gt;m`o&lt;Esc&gt;``:set nopaste&lt;CR&gt;\r\nmap &lt;leader&gt;O :set paste&lt;CR&gt;m`O&lt;Esc&gt;``:set nopaste&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(178, 0, 'Remove empty lines\n', '&quot; Remove empty lines\r\nnnoremap &lt;Leader&gt;d :g/^$/d&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(179, 0, 'Resize Vsplits on window resize\n', 'au VimResized * exe &quot;normal! \\&lt;c-w&gt;=&quot;', '2013-07-10', '2013-07-10'),
(180, 0, 'pastetoggle always available\n', '&quot; toggle paste outside INSERT mode &quot;\r\nmap &lt;Leader&gt;v :set invpaste&lt;CR&gt;:set paste?&lt;CR&gt; \r\n&quot; toggle paste in INSERT mode &quot;\r\nset pastetoggle=&lt;Leader&gt;v', '2013-07-10', '2013-07-10'),
(181, 0, 'update current working directory\n', 'autocmd BufEnter * lcd %:p:h', '2013-07-10', '2013-07-10'),
(182, 0, 'Add a threecents feedback form to HTML code\n', 'cnoremap tc exe &quot;r !curl http://threecents.elevenbasetwo.com/api/emails/&quot; . input(&quot;Email address: &quot;) . &quot;/script 2&gt; /dev/null&quot;&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(183, 0, 'tabp and tabn with your homerow left and right keys\n', 'map &lt;C-j&gt; :tabp&lt;CR&gt;\r\nmap &lt;C-k&gt; :tabn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(184, 0, 'Jump to start/end of lines with home row keys\n', '&quot; Jump to start and end of line using the home row keys\r\nmap H ^\r\nmap L $', '2013-07-10', '2013-07-10'),
(185, 0, 'Copy first non-blank to last non-blank character on a line\n', 'noremap YY ^yg_', '2013-07-10', '2013-07-10'),
(186, 0, 'More Text per Window\n', 'set linespace=-1 &quot;decrease LineHeight', '2013-07-10', '2013-07-10'),
(187, 0, 'Best Programming Font\n', 'set guifont=Consolas:h8:cANSI &quot;Windows only', '2013-07-10', '2013-07-10'),
(188, 0, 'Check the current PHP file syntax\n', 'fun! CheckPHPSyntax()\r\n    let error = substitute(system(&quot;php -l &quot; . expand(&quot;%&quot;) .  &quot; 2&gt;&amp;1 | sed ''s/.*\\ //g'' | head -n 1 | grep ''^[0-9]\\\\+$''&quot;), &quot;\\n&quot;, &quot;&quot;, &quot;&quot;)\r\n    if error\r\n        hi StatusLine ctermbg=231 ctermfg=196\r\n        exe &quot;normal&quot; error . &quot;gg&quot;\r\n    else\r\n        hi StatusLine ctermbg=253 ctermfg=238\r\n    endif\r\nendfunction\r\nau! BufWritePost *.php call CheckPHPSyntax()', '2013-07-10', '2013-07-10'),
(189, 0, 'Spacebar for page up/page down\n', 'nmap &lt;Space&gt; &lt;C-f&gt;\r\nnmap &lt;S-Space&gt; &lt;C-b&gt;\r\nnmap &lt;Backspace&gt; &lt;C-b&gt;', '2013-07-10', '2013-07-10'),
(190, 0, 'Remap seldom-used keys\n', 'nmap , &quot;+\r\nnmap s &lt;C-w&gt;\r\n&quot; other rarely used keys:\r\n&quot; nmap Q ... \r\n&quot; nmap + ... \r\n&quot; nmap _ ... \r\n&quot; nmap - ... \r\n&quot; nmap &lt;CR&gt; ... \r\n&quot; nmap S ...\r\n&quot; nmap K ...\r\n&quot; nmap &amp; ...', '2013-07-10', '2013-07-10'),
(191, 0, 'Fast paste mode toggle\n', 'nmap \\o :set paste!&lt;CR&gt;:set paste?&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(192, 0, 'Toggle between common tab modes\n', 'nmap \\M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4&lt;CR&gt;\r\nnmap \\m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2&lt;CR&gt;\r\nnmap \\t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4&lt;CR&gt;\r\nnmap \\T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(193, 0, 'Edit the previous buffer\n', 'nmap &lt;C-e&gt; :e#&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(194, 0, 'Emacs-like bindings in command line\n', 'cnoremap &lt;C-a&gt;  &lt;Home&gt;\r\ncnoremap &lt;C-b&gt;  &lt;Left&gt;\r\ncnoremap &lt;C-f&gt;  &lt;Right&gt;\r\ncnoremap &lt;C-d&gt;  &lt;Delete&gt;\r\ncnoremap &lt;M-b&gt;  &lt;S-Left&gt;\r\ncnoremap &lt;M-f&gt;  &lt;S-Right&gt;\r\ncnoremap &lt;M-d&gt;  &lt;S-right&gt;&lt;Delete&gt;\r\ncnoremap &lt;Esc&gt;b &lt;S-Left&gt;\r\ncnoremap &lt;Esc&gt;f &lt;S-Right&gt;\r\ncnoremap &lt;Esc&gt;d &lt;S-right&gt;&lt;Delete&gt;\r\ncnoremap &lt;C-g&gt;  &lt;C-c&gt;', '2013-07-10', '2013-07-10'),
(195, 0, 'Search for the word under the cursor in the current directory\n', 'nmap &lt;C-k&gt; :!clear; ack -C &quot;\\b&lt;cword&gt;\\b&quot; \\| less -FRX &lt;CR&gt;', '2013-07-10', '2013-07-10'),
(196, 0, 'Make j &amp; k linewise\n', 'map j gj\r\nmap k gk', '2013-07-10', '2013-07-10'),
(197, 0, 'Unicode list chars\n', 'set listchars=tab:▶\\ ,trail:◀,extends:»,precedes:«', '2013-07-10', '2013-07-10'),
(198, 0, 'Kill tabs and trailing space\n', 'command! CLEAN retab | %s/ \\+$//', '2013-07-10', '2013-07-10'),
(199, 0, 'Rename a buffer within Vim and on the disk\n', '&quot; Rename.vim  -  Rename a buffer within Vim and on the disk\r\n&quot; Copyright June 2007 by Christian J. Robinson &lt;infynity@onewest.net&gt;\r\n&quot; Distributed under the terms of the Vim license.  See &quot;:help license&quot;.\r\n&quot; http://www.infynity.spodzone.com/vim/Rename.vim\r\n&quot; Usage: :Rename[!] {newname}\r\ncommand! -nargs=* -complete=file -bang Rename :call Rename(&quot;&lt;args&gt;&quot;, &quot;&lt;bang&gt;&quot;)\r\nfunction! Rename(name, bang)\r\n    let l:curfile = expand(&quot;%:p&quot;)\r\n    let v:errmsg = &quot;&quot;\r\n    silent! exe &quot;saveas&quot; . a:bang . &quot; &quot; . a:name\r\n    if v:errmsg =~# ''^$\\|^E329''\r\n        if expand(&quot;%:p&quot;) !=# l:curfile &amp;&amp; filewritable(expand(&quot;%:p&quot;))\r\n            silent exe &quot;bwipe! &quot; . l:curfile\r\n            if delete(l:curfile)\r\n                echoerr &quot;Could not delete &quot; . l:curfile\r\n            endif\r\n        endif\r\n    else\r\n        echoerr v:errmsg\r\n    endif\r\nendfunction', '2013-07-10', '2013-07-10'),
(200, 0, 'Source a local vim configuration\n', 'source ~/.vimlocal', '2013-07-10', '2013-07-10'),
(201, 0, 'Default keys for tab switching\n', 'imap &lt;c-tab&gt; &lt;esc&gt;:tabn&lt;cr&gt;\r\nnmap &lt;c-tab&gt; :tabn&lt;cr&gt;\r\n\r\nimap &lt;c-s-tab&gt; &lt;esc&gt;:tabp&lt;cr&gt;\r\nnmap &lt;c-s-tab&gt; :tabp&lt;cr&gt;\r\n\r\nimap &lt;a-1&gt; &lt;esc&gt;:tabn 1&lt;cr&gt;\r\nnmap &lt;a-1&gt; :tabn 1&lt;cr&gt;\r\nimap &lt;a-2&gt; &lt;esc&gt;:tabn 2&lt;cr&gt;\r\nnmap &lt;a-2&gt; :tabn 2&lt;cr&gt;\r\nimap &lt;a-3&gt; &lt;esc&gt;:tabn 3&lt;cr&gt;\r\nnmap &lt;a-3&gt; :tabn 3&lt;cr&gt;\r\nimap &lt;a-4&gt; &lt;esc&gt;:tabn 4&lt;cr&gt;\r\nnmap &lt;a-4&gt; :tabn 4&lt;cr&gt;\r\nimap &lt;a-5&gt; &lt;esc&gt;:tabn 5&lt;cr&gt;\r\nnmap &lt;a-5&gt; :tabn 5&lt;cr&gt;\r\nimap &lt;a-6&gt; &lt;esc&gt;:tabn 6&lt;cr&gt;\r\nnmap &lt;a-6&gt; :tabn 6&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(202, 0, 'Window/Split Switching\n', 'noremap &lt;tab&gt; &lt;C-w&gt;w', '2013-07-10', '2013-07-10'),
(203, 0, 'Show Indent Guides\n', '&quot;show indent guides\r\nset lcs=tab:\\⁞\\ \r\nset list\r\n&quot;set tabwidth to 4\r\nset tabstop=4\r\nset softtabstop=4\r\nset shiftwidth=4', '2013-07-10', '2013-07-10'),
(204, 0, 'Shift W write to file\n', 'cnoreabbrev W w\r\ncnoreabbrev Q q\r\ncnoreabbrev Wq wq\r\ncnoreabbrev WQ wq', '2013-07-10', '2013-07-10'),
(205, 0, 'CopyMatches\n', '&quot; Copy matches of the last search to a register (default is the clipboard).\r\n&quot; Accepts a range (default is whole file).\r\n&quot; ''CopyMatches''   copy matches to clipboard (each match has \\n added).\r\n&quot; ''CopyMatches x'' copy matches to register x (clears register first).\r\n&quot; ''CopyMatches X'' append matches to register x.\r\n&quot; We skip empty hits to ensure patterns using ''\\ze'' don''t loop forever.\r\ncommand! -range=% -register CopyMatches call s:CopyMatches(&lt;line1&gt;, &lt;line2&gt;, ''&lt;reg&gt;'')\r\nfunction! s:CopyMatches(line1, line2, reg)\r\n  let hits = []\r\n  for line in range(a:line1, a:line2)\r\n    let txt = getline(line)\r\n    let idx = match(txt, @/)\r\n    while idx &gt;= 0\r\n      let end = matchend(txt, @/, idx)\r\n      if end &gt; idx\r\n	call add(hits, strpart(txt, idx, end-idx))\r\n      else\r\n	let end += 1\r\n      endif\r\n      if @/[0] == ''^''\r\n        break  &quot; to avoid false hits\r\n      endif\r\n      let idx = match(txt, @/, end)\r\n    endwhile\r\n  endfor\r\n  if len(hits) &gt; 0\r\n    let reg = empty(a:reg) ? ''+'' : a:reg\r\n    execute ''let @''.reg.'' = join(hits, &quot;\\n&quot;) . &quot;\\n&quot;''\r\n  else\r\n    echo ''No hits''\r\n  endif\r\nendfunction', '2013-07-10', '2013-07-10'),
(206, 0, 'join lines with cursor staying in place\n', ':nnoremap &lt;silent&gt; J :let p=getpos(''.'')&lt;bar&gt;join&lt;bar&gt;call setpos(''.'', p)&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(207, 0, 'Select Every Line\n', ':%y+', '2013-07-10', '2013-07-10'),
(208, 0, 'Useful Statusline\n', 'if has(''statusline'')\r\n   &quot; Status line detail:\r\n   &quot; %f     file path\r\n   &quot; %y     file type between braces (if defined)\r\n   &quot; %([%R%M]%)   read-only, modified and modifiable flags between braces\r\n   &quot; %{''!''[&amp;ff==''default_file_format'']}\r\n   &quot;        shows a ''!'' if the file format is not the platform\r\n   &quot;        default\r\n   &quot; %{''$''[!&amp;list]}  shows a ''*'' if in list mode\r\n   &quot; %{''~''[&amp;pm=='''']} shows a ''~'' if in patchmode\r\n   &quot; (%{synIDattr(synID(line(''.''),col(''.''),0),''name'')})\r\n   &quot;        only for debug : display the current syntax item name\r\n   &quot; %=     right-align following items\r\n   &quot; #%n    buffer number\r\n   &quot; %l/%L,%c%V   line number, total number of lines, and column number\r\n   function SetStatusLineStyle()\r\n      if &amp;stl == '''' || &amp;stl =~ ''synID''\r\n         let &amp;stl=&quot;%f %y%([%R%M]%)%{''!''[&amp;ff==''&quot;.&amp;ff.&quot;'']}%{''$''[!&amp;list]}%{''~''[&amp;pm=='''']}%=#%n %l/%L,%c%V &quot;\r\n      else\r\n         let &amp;stl=&quot;%f %y%([%R%M]%)%{''!''[&amp;ff==''&quot;.&amp;ff.&quot;'']}%{''$''[!&amp;list]} (%{synIDattr(synID(line(''.''),col(''.''),0),''name'')})%=#%n %l/%L,%c%V &quot;\r\n      endif\r\n   endfunc\r\n   &quot; Switch between the normal and vim-debug modes in the status line\r\n   nmap _ds :call SetStatusLineStyle()&lt;CR&gt;\r\n   call SetStatusLineStyle()\r\n   &quot; Window title\r\n   if has(''title'')\r\n      set titlestring=%t%(\\ [%R%M]%)\r\n   endif\r\nendif', '2013-07-10', '2013-07-10'),
(209, 0, 'Animate tab stop changes\n', 'function Tabanim(desired)\r\n  if a:desired &lt; &amp;tabstop\r\n    let direction = -1\r\n  else\r\n    let direction = 1\r\n  endif\r\n  while a:desired != &amp;tabstop\r\n    sleep 70m\r\n    let &amp;tabstop = &amp;tabstop + direction\r\n    redraw\r\n  endwhile\r\n  let &amp;shiftwidth = &amp;tabstop\r\nendfunction\r\n\r\nmap &lt;F9&gt; :call Tabanim(1)&lt;CR&gt;\r\nmap &lt;F8&gt; :call Tabanim(4)&lt;CR&gt;\r\nmap &lt;F10&gt; :call Tabanim(8)&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(210, 0, 'Tab completion in one line\n', 'inoremap &lt;expr&gt; &lt;Tab&gt; strpart(getline(''.''), col(''.'') - 2, 1) =~ ''\\w'' ? &quot;\\&lt;C-P&gt;&quot; : &quot;\\&lt;Tab&gt;&quot;', '2013-07-10', '2013-07-10'),
(211, 0, 'Run Django unit tests\n', 'cnoremap djt !./manage.py test&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(212, 0, 'Make Arrow Keys Useful\n', 'nmap &lt;up&gt;       :bp&lt;CR&gt;\r\nnmap &lt;down&gt;     :bn&lt;CR&gt;\r\nnmap &lt;left&gt;     :tabp&lt;CR&gt;\r\nnmap &lt;right&gt;    :tabn&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(213, 0, 'Indent Current Block\n', '&quot; indent block of code\r\nmap &lt;Leader&gt;ib vip=', '2013-07-10', '2013-07-10'),
(214, 0, 'HTML TAG to HTML TAG\n', 'nnoremap &lt;Tab&gt; /&lt;\\w*\\(\\s\\\\|&gt;\\)&lt;CR&gt;\r\nnnoremap &lt;S-Tab&gt; ?&lt;\\w*\\(\\s\\\\|&gt;\\)&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(215, 0, 'Exchange arbitrary strings\n', 'vnoremap &lt;Leader&gt;x &lt;Esc&gt;`.``gvP``P', '2013-07-10', '2013-07-10');
INSERT INTO `op_tips` (`tipsId`, `tipsUid`, `tipsTitle`, `tipsContent`, `tipsCtime`, `tipsUtime`) VALUES
(216, 0, 'Preview function signature\n', '&lt;C-}&gt;', '2013-07-10', '2013-07-10'),
(217, 0, 'Toggle colorcolumn\n', 'function! g:ToggleColorColumn()\r\n  if &amp;colorcolumn != ''''\r\n    setlocal colorcolumn&amp;\r\n  else\r\n    setlocal colorcolumn=+1\r\n  endif\r\nendfunction\r\n\r\nnnoremap &lt;silent&gt; &lt;leader&gt;cc :call g:ToggleColorColumn()&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(218, 0, 'Toggle relativecolumn with mapping\n', 'function! g:ToggleRelativeNumber()\r\n  if &amp;relativenumber\r\n    setlocal number\r\n  else\r\n    setlocal relativenumber\r\n  endif\r\nendfunction\r\n\r\nnnoremap &lt;silent&gt; &lt;leader&gt;nu :call g:ToggleRelativeNumber()&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(219, 0, 'Use relativenumber only in the focused window\n', 'if exists(''&amp;relativenumber'')\r\n  set relativenumber\r\n  augroup WindowRNU\r\n    auto!\r\n    auto BufWinEnter,WinEnter,FocusGained * setlocal relativenumber\r\n    auto WinLeave,FocusLost               * setlocal number\r\n  augroup END\r\nendif', '2013-07-10', '2013-07-10'),
(220, 0, 'Jump to file or tag in vertical split\n', '&quot; use ,F to jump to tag in a vertical split\r\nnnoremap &lt;silent&gt; ,F :let word=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;:vsp&lt;CR&gt;:wincmd w&lt;cr&gt;:exec(&quot;tag &quot;. word)&lt;cr&gt;\r\n\r\n&quot; use ,gf to go to file in a vertical split\r\nnnoremap &lt;silent&gt; ,gf :vertical botright wincmd f&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(221, 0, 'list buffers and switch to a buffer quickly\n', 'nmap &lt;leader&gt;b :ls&lt;CR&gt;:buffer&lt;Space&gt;', '2013-07-10', '2013-07-10'),
(222, 0, 'Test\n', 'Test', '2013-07-10', '2013-07-10'),
(223, 0, 'add empty lines without insert\n', '&quot;moving lines with enter and shift enter\r\nmap &lt;CR&gt; o&lt;Esc&gt;k\r\nmap &lt;S-Enter&gt; O&lt;Esc&gt;j', '2013-07-10', '2013-07-10'),
(224, 0, 'remove diff formatting from buffer\n', 'noremap ,do :set nodiff fdc=0 \\| norm zR&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(225, 0, 'Use space to move through split windows\n', 'nmap &lt;Space&gt; &lt;C-w&gt;w\r\nnmap &lt;S-Space&gt; &lt;C-w&gt;W', '2013-07-10', '2013-07-10'),
(226, 0, 'create new line above current\n', 'inoremap &lt;C-b&gt; &lt;C-o&gt;O', '2013-07-10', '2013-07-10'),
(227, 0, 'Convert selection to html\n', 'vnoremap &lt;leader&gt;h :TOhtml&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(228, 0, 'directory index for the images preview like a boss\n', 'cd dir-with-images\r\n\r\nvim index.html  \r\n\r\n:r!ls \r\n\r\n:%s/^\\(.+\\)$/&lt;img src&quot;\\1&quot;&gt;/g', '2013-07-10', '2013-07-10'),
(229, 0, 'paste cut text in insert mode\n', 'inoremap &lt;c-d&gt; &lt;c-r&gt;&quot;', '2013-07-10', '2013-07-10'),
(230, 0, 'Number text object\n', 'onoremap N :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(0)&lt;cr&gt;\r\nxnoremap N :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(0)&lt;cr&gt;\r\nonoremap aN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\nxnoremap aN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\nonoremap iN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\nxnoremap iN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\n\r\nfunction! s:NumberTextObject(whole)\r\n    normal! v\r\n\r\n    while getline(''.'')[col(''.'')] =~# ''\\v[0-9]''\r\n        normal! l\r\n    endwhile\r\n\r\n    if a:whole\r\n        normal! o\r\n\r\n        while col(''.'') &gt; 1 &amp;&amp; getline(''.'')[col(''.'') - 2] =~# ''\\v[0-9]''\r\n            normal! h\r\n        endwhile\r\n    endif\r\nendfunction', '2013-07-10', '2013-07-10'),
(231, 0, 'vim folding for ruby\n', 'set foldtext=MyFoldFunction()\r\nset fillchars=fold:\\ \r\n\r\nfunction! MyFoldFunction()\r\n  let line = getline(v:foldstart)\r\n  let lastline = getline(v:foldend)\r\n  let numfolded = v:foldend - v:foldstart + 1\r\n  return line . ''  folded '' . numfolded . '' lines''\r\nendfunction\r\n\r\nhighlight Folded term=bold ctermbg=0 ctermfg=7 guibg=bg guifg=fg\r\nhighlight FoldColumn term=bold ctermbg=10 ctermfg=7 guibg=bg guifg=fg', '2013-07-10', '2013-07-10'),
(232, 0, 'Find references to file\n', '&quot;GitGrep - open up a git grep line, with a quote started for the search\r\nnnoremap ,gg :GitGrep &quot;&quot;&lt;left&gt;\r\n&quot;GitGrep Current Partial\r\nnnoremap ,gcp :GitGrepCurrentPartial&lt;CR&gt;\r\n&quot;GitGrep Current File\r\nnnoremap ,gcf :call GitGrep(expand(&quot;%:t:r&quot;))&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(233, 0, 'Quickly switch to normal and save\n', 'inoremap ;; &lt;esc&gt;&lt;right&gt;\r\nnmap ; :\r\ncabbrev ; update', '2013-07-10', '2013-07-10'),
(234, 0, 'Increase decrease fold columns size\n', '&quot; increase foldlevel\r\nnnoremap &lt;silent&gt; &lt;localleader&gt;= zr:call FoldColumnSize()&lt;cr&gt;\r\n&quot; decrease foldlevel\r\nnnoremap &lt;silent&gt; &lt;localleader&gt;- zm:call FoldColumnSize()&lt;cr&gt;\r\n\r\nfunction! FoldColumnSize()\r\n    if &amp;foldenable\r\n        :exec &quot;setlocal foldcolumn=&quot; . eval(&amp;foldlevel+1)\r\n    else\r\n        setlocal foldcolumn=0\r\n    endif\r\n    :normal! zz\r\nendfunction', '2013-07-10', '2013-07-10'),
(235, 0, 'Open another gvim process from current window\n', 'command! -nargs=? -complete=help Ghelp call s:Vim(''-c help '' . &lt;q-args&gt;)\r\ncommand! -nargs=? -complete=file Gvim call s:Vim(&lt;q-args&gt;)\r\n\r\nfunction! s:Vim(cmd)\r\n    let com = ''gvim''\r\n    let com .= '' &quot;'' . expand(a:cmd) . ''&quot;''\r\n    silent call system(com)\r\nendfunction', '2013-07-10', '2013-07-10'),
(236, 0, 'Append line to current clipboard\n', 'nnoremap &lt;silent&gt; &lt;localleader&gt;a :call ClipAppend()&lt;cr&gt;\r\n\r\nfunc! ClipAppend()\r\n    let @a=@0\r\n    normal! &quot;Ayy\r\n    let @0=@a\r\nendfunc', '2013-07-10', '2013-07-10'),
(237, 0, 'Move window up / down / left / right with wasd\n', '&quot; swap window positions (wasd)\r\nnnoremap &lt;m-s-s&gt; :call WindowSwap(''h'')&lt;cr&gt;&lt;c-w&gt;J&lt;c-w&gt;=\r\nnnoremap &lt;m-s-w&gt; :call WindowSwap(''h'')&lt;cr&gt;&lt;c-w&gt;K&lt;c-w&gt;=\r\nnnoremap &lt;m-s-a&gt; :call WindowSwap(''v'')&lt;cr&gt;&lt;c-w&gt;H&lt;c-w&gt;=\r\nnnoremap &lt;m-s-d&gt; :call WindowSwap(''v'')&lt;cr&gt;&lt;c-w&gt;L&lt;c-w&gt;=\r\n\r\n\r\nfunction! WindowSwap(dir)\r\n    if winnr(''$'')==1\r\n        if a:dir==''h'' | :new | else | :vnew | endif\r\n        wincmd p\r\n    endif\r\nendfunction', '2013-07-10', '2013-07-10'),
(238, 0, 'Ex commands in insert mode\n', '&quot; ex mode numbers\r\n\r\nfor i in range(1,9)\r\n    exec ''inoremap &lt;m-''.i.''&gt; &lt;C-o&gt;''.i\r\nendfor', '2013-07-10', '2013-07-10'),
(239, 0, 'Remap undo/redo\n', '&quot; undo m-- or &lt;c-x&gt;u\r\ninoremap &lt;m--&gt; &lt;esc&gt;uzvzza\r\nnnoremap &lt;m--&gt; uzvzz\r\n\r\n\r\n&quot;redo m-=\r\ninoremap &lt;m-=&gt; &lt;esc&gt;&lt;C-R&gt;vzzza\r\nnnoremap &lt;m-=&gt; &lt;c-R&gt;zvzz', '2013-07-10', '2013-07-10'),
(240, 0, 'Entire buffer text object\n', '&quot; make vig select entire file\r\nonoremap &lt;silent&gt; ig &lt;esc&gt;:execute &quot;:normal! ggVG&quot; . v:operator&lt;cr&gt; \r\nvnoremap &lt;silent&gt; ig :normal! ggVG&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(241, 0, 'Split line based on delimiter\n', 'command! -nargs=? SplitLines :call &lt;SID&gt;SplitLines(''&lt;args&gt;'')\r\n\r\nfunction! &lt;SID&gt;SplitLines(...) \r\n    if a:1 == ''''\r\n        let delimiter = input(&quot;Delimiter: &quot;)\r\n        if delimiter == ''''\r\n            return\r\n        endif\r\n    else\r\n        let delimiter=a:1\r\n    endif\r\n    silent! execute ''s=\\('' . delimiter . ''\\+\\)=\\1\\r=g''\r\nendfunction', '2013-07-10', '2013-07-10'),
(242, 0, 'Quickly Edit Text between HTML Tags\n', '&quot; delete Text and go switch to insert mode between HTML-Tags\r\nmap &lt;Leader&gt;&lt; F&gt;lct&lt;', '2013-07-10', '2013-07-10'),
(243, 0, 'Use fj as &lt;Esc&gt; alternative\n', '&quot; Use fj as &lt;Esc&gt; alternative\r\ninoremap fj &lt;esc&gt;', '2013-07-10', '2013-07-10'),
(244, 0, 'make rapid time travel easier\n', 'noremap &lt;left&gt; g-\r\nnoremap &lt;right&gt; g+', '2013-07-10', '2013-07-10'),
(245, 0, 'Use arrow keys to change tabs\n', ':noremap &lt;left&gt; :tabprevious&lt;CR&gt;\r\n:noremap &lt;right&gt; :tabnext&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(246, 0, 'Remap U to &lt;C-r&gt; for easier redo\n', '&quot; remap U to &lt;C-r&gt; for easier redo\r\nnnoremap U &lt;C-r&gt;', '2013-07-10', '2013-07-10'),
(247, 0, 'Allow local vimrc configurations\n', 'if filereadable(&quot;.local.vim&quot;)\r\n  source .local.vim\r\nendif', '2013-07-10', '2013-07-10'),
(248, 0, 'Remove trailing whitespace\n', 'map &lt;Leader&gt;&lt;Space&gt; :%s/\\s\\+$//g&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(249, 0, 'use the undo tree by default\n', 'nnoremap u g-\r\nnnoremap &lt;C-R&gt; g+', '2013-07-10', '2013-07-10'),
(250, 0, 'Map C-c to Esc so that InsertLeave gets called\n', 'inoremap &lt;silent&gt; &lt;C-C&gt; &lt;Esc&gt;', '2013-07-10', '2013-07-10'),
(251, 0, 'Better undo when in Insert mode\n', 'au CursorHoldI * :call feedkeys(&quot;\\&lt;c-g&gt;u&quot;,''t'')\r\n\r\nau InsertEnter * let updaterestore=&amp;updatetime \r\n                \\|set updatetime=500\r\n\r\nau InsertLeave * let &amp;updatetime=updaterestore', '2013-07-10', '2013-07-10'),
(252, 0, 'Open new tabs at the end\n', 'autocmd BufNew * if &amp;showtabline &amp;&amp; winnr(&quot;$&quot;) == 1 | tabmove | endif', '2013-07-10', '2013-07-10'),
(253, 0, 'Substitute all matches in a line by default\n', 'set gdefault', '2013-07-10', '2013-07-10'),
(254, 0, 'Update open files when changed externally\n', 'set autoread', '2013-07-10', '2013-07-10'),
(255, 0, 'Write files automatically\n', 'set autowriteall', '2013-07-10', '2013-07-10'),
(256, 0, 'Create a shortcut to mute highlighting\n', 'nnoremap &lt;silent&gt; &lt;C-l&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;&lt;C-l&gt;', '2013-07-10', '2013-07-10'),
(257, 0, 'arrow keys for quick buffer/window navigation\n', '&quot; NOTE: use arrow keys for quick buffer/window navigation                                             \r\n&quot; switch to the previous buffer\r\nnoremap &lt;silent&gt; &lt;left&gt; :bprevious&lt;cr&gt;\r\n \r\n&quot; switch to the next buffer\r\nnoremap &lt;silent&gt; &lt;right&gt; :bnext&lt;cr&gt;\r\n \r\n&quot; make the currently active window the only one\r\nnoremap &lt;silent&gt; &lt;up&gt; :only&lt;cr&gt;\r\n \r\n&quot; show all buffers, type ''buffer'' in the command line so all I have to do\r\n&quot; is type a number and hit enter to switch to that buffer (or hit &lt;esc&gt; to quit)\r\nnoremap &lt;silent&gt; &lt;down&gt; :ls&lt;cr&gt;:buffer', '2013-07-10', '2013-07-10'),
(258, 0, 'Refactor local variable to &quot;let&quot;-block\n', '&quot; Extract spec local variable into Rspec &quot;let&quot;-block\r\n&quot;\r\n&quot; Example:\r\n&quot;\r\n&quot;   describe Post do\r\n&quot;     it ''should be published'' do\r\n&quot;       post = create :post # &lt;== current line\r\n&quot;       post.should be_published\r\n&quot;     end\r\n&quot;   end\r\n&quot;\r\n&quot; Becomes:\r\n&quot;\r\n&quot;   describe Post do\r\n&quot;     let(:post) {  create :post }\r\n&quot;     it ''should be published'' do\r\n&quot;       post.should be_published # &lt;== current line\r\n&quot;     end\r\n&quot;   end\r\n&quot;\r\n&quot; ^M is carriage return character (insert using ^V^M)\r\n&quot; ^[ is escape character (insert using ^V^[)\r\nlet @l=''jmlkdd?\\vdescribe|context?^Mp==I:^[^ys2w)Iletf=xys${`l''', '2013-07-10', '2013-07-10'),
(259, 0, 'open help in expanded window\n', 'set helpheight=999                    &quot; when viewing the help documentation use a full-sized window (instead of 1/2 the size)', '2013-07-10', '2013-07-10'),
(260, 0, 'Easy window Movement\n', 'nnoremap &lt;Tab&gt;h &lt;C-w&gt;h                                                                                                                                                                                                                                     \r\nnnoremap &lt;Tab&gt;j &lt;C-w&gt;j                                                                                                                                                                                                                                     \r\nnnoremap &lt;Tab&gt;k &lt;C-w&gt;k                                                                                                                                                                                                                                     \r\nnnoremap &lt;Tab&gt;l &lt;C-w&gt;l', '2013-07-10', '2013-07-10'),
(261, 0, 'Show Git Branch\n', 'function! GitBranch()\r\n  let branch = system(&quot;git branch 2&gt; /dev/null | sed -e ''/^[^*]/d'' -e ''s/* //''&quot;)\r\n  if branch != ''''\r\n    return ''   Git Branch: '' . substitute(branch, ''\\n'', '''', ''g'')\r\n  en  \r\n  return ''''\r\nendfunction\r\n\r\n&quot; minimal status line, only shows git branch\r\nset statusline=%{GitBranch()}', '2013-07-10', '2013-07-10'),
(262, 0, 'append a character in insert-mode\n', 'function! AppendChar()\r\n    :let pos = getpos(&quot;.&quot;)\r\n    :let text = &quot;;&quot;\r\n    :execute &quot;:normal A&quot;.text\r\n    :call setpos(''.'', pos)\r\n:endfunction', '2013-07-10', '2013-07-10'),
(263, 0, 'tile all open buffers in windows\n', '&quot; open all buffers in separate (vertical) panes (see '':help :ball'' and '':help :vertical'')\r\nnoremap &lt;silent&gt; &lt;leader&gt;a :vertical :ball&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(264, 0, 'Clear Whitespace on Save\n', '&quot; From http://vimcasts.org/episodes/tidying-whitespace/\r\n&quot; Preserves/Saves the state, executes a command, and returns to the saved state\r\n&quot; Modified from http://vimbits.com/bits/231\r\n&quot; Remove trailing whitespace on save\r\nfunction! Preserve(command)\r\n    &quot; Save last search, and cursor position.\r\n    let _s=@/\r\n    let l = line(&quot;.&quot;)\r\n    let c = col(&quot;.&quot;)\r\n    &quot; Do the business:\r\n    execute a:command\r\n    &quot; Clean up: restore previous search history, and cursor position\r\n    let @/=_s\r\n    call cursor(l, c)\r\nendfunction\r\n&quot; Execute clear whitespace on save\r\nautocmd BufWritePre * :call Preserve(&quot;%s/\\\\s\\\\+$//e&quot;)', '2013-07-10', '2013-07-10'),
(265, 0, 'Improve CtrlP\n', 'let ctrlp_filter_greps = &quot;&quot;.\r\n    \\ &quot;egrep -iv ''\\\\.(&quot; .\r\n    \\ &quot;jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po&quot; .\r\n    \\ &quot;)$'' | &quot; .\r\n    \\ &quot;egrep -v ''^(\\\\./)?(&quot; .\r\n    \\ &quot;deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/&quot; .\r\n    \\ &quot;)''&quot;\r\n\r\nlet my_ctrlp_git_command = &quot;&quot; .\r\n    \\ &quot;cd %s &amp;&amp; git ls-files | &quot; .\r\n    \\ ctrlp_filter_greps\r\n\r\nif has(&quot;unix&quot;)\r\n    let my_ctrlp_user_command = &quot;&quot; .\r\n    \\ &quot;find %s ''('' -type f -or -type l '')'' -maxdepth 15 -not -path ''*/\\\\.*/*'' | &quot; .\r\n    \\ ctrlp_filter_greps\r\nendif\r\n\r\nlet g:ctrlp_user_command = [''.git/'', my_ctrlp_git_command, my_ctrlp_user_command]', '2013-07-10', '2013-07-10'),
(266, 0, 'List all matches for a search\n', ':g/', '2013-07-10', '2013-07-10'),
(267, 0, 'Substitute word under cursor/selection\n', '&quot; Substitute word under cursor globally\r\nnnoremap &lt;C-s&gt; :%s/\\&lt;&lt;C-r&gt;&lt;C-w&gt;\\&gt;//g&lt;Left&gt;&lt;Left&gt;\r\n&quot; ask for confirmation\r\nnnoremap &lt;A-s&gt; :%s/\\&lt;&lt;C-r&gt;&lt;C-w&gt;\\&gt;//gc&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;\r\n\r\n&quot; Substitute selection globally\r\nvnoremap &lt;C-s&gt; y&lt;Esc&gt;:%s/&lt;C-r&gt;&quot;//g&lt;Left&gt;&lt;Left&gt;\r\n&quot; ask for confirmation\r\nvnoremap &lt;A-s&gt; y&lt;Esc&gt;:%s/&lt;C-r&gt;&quot;//gc&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;', '2013-07-10', '2013-07-10'),
(268, 0, 'Duplicate current tab\n', 'nnoremap &lt;F4&gt; mt:tabe&lt;SPACE&gt;%&lt;CR&gt;gT`tgt`t', '2013-07-10', '2013-07-10'),
(269, 0, 'Easy switch between windows\n', 'nmap &lt;tab&gt;&lt;tab&gt; &lt;C-w&gt;w', '2013-07-10', '2013-07-10'),
(270, 0, 'Open help to the right or in new tab\n', 'cnoremap &lt;expr&gt; hr getcmdtype() == '':'' &amp;&amp; empty(getcmdline()) ? ''bo vert h '' : ''hr''\r\ncnoremap &lt;expr&gt; ht getcmdtype() == '':'' &amp;&amp; empty(getcmdline()) ? ''tab h ''     : ''ht''', '2013-07-10', '2013-07-10'),
(271, 0, 'Easy Diffing\n', 'map  &lt;leader&gt;gq :diffoff&lt;cr&gt;&lt;c-w&gt;h:q&lt;cr&gt;\r\nmap  &lt;leader&gt;gg :Gdiff&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(272, 0, 'Indent the whole buffer\n', 'noremap &lt;Leader&gt;= m`gg=G``', '2013-07-10', '2013-07-10'),
(273, 0, 'Mouse support\n', 'if has(''mouse'')\r\n  set mouse=a\r\nendif', '2013-07-10', '2013-07-10'),
(274, 0, 'English spellchecking but no spellchecking by default\n', 'if has(''spell'')\r\n  silent! language messages &quot;en&quot;\r\n  set langmenu=none\r\n  set spl=en spell\r\n  set nospell\r\nendif', '2013-07-10', '2013-07-10'),
(275, 0, 'Git commit messages have spellcheck and start in insert mode\n', 'if has(''autocmd'')\r\n  if has(''spell'')\r\n    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell\r\n  endif\r\n  au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys(''ggi'', ''t'')\r\nendif', '2013-07-10', '2013-07-10'),
(276, 0, 'Fold stuff around selection\n', ':vnoremap &lt;Leader&gt;za &lt;Esc&gt;`&lt;kzfgg`&gt;jzfG`&lt;', '2013-07-10', '2013-07-10'),
(277, 0, 'Easy escape without cursor movement\n', 'inoremap jj &lt;Esc&gt;`^', '2013-07-10', '2013-07-10'),
(278, 0, 'Move paragraphs up and down easily with one keystroke\n', 'nnoremap &lt;C-j&gt; vapd}p\r\nnnoremap &lt;C-k&gt; vapd{{p', '2013-07-10', '2013-07-10'),
(279, 0, 'Delete a buffer in CtrlPBuf mode\n', 'let g:ctrlp_buffer_func = { ''enter'': ''MyCtrlPMappings'' }\r\n\r\nfunc! MyCtrlPMappings()\r\n    nnoremap &lt;buffer&gt; &lt;silent&gt; &lt;c-@&gt; :call &lt;sid&gt;DeleteBuffer()&lt;cr&gt;\r\nendfunc\r\n\r\nfunc! s:DeleteBuffer()\r\n    exec &quot;bd&quot; fnamemodify(getline(''.'')[2:], '':p'')\r\n    exec &quot;norm \\&lt;F5&gt;&quot;\r\nendfunc', '2013-07-10', '2013-07-10'),
(280, 0, 'Better than escape\n', 'Use ctrl+[ instead of &lt;escape&gt; or some random key binding.', '2013-07-10', '2013-07-10'),
(281, 0, 'move cursor when insert mode\n', '﻿﻿﻿imap &lt;C-h&gt; &lt;C-o&gt;h\r\nimap &lt;C-j&gt; &lt;C-o&gt;j\r\nimap &lt;C-k&gt; &lt;C-o&gt;k\r\nimap &lt;C-l&gt; &lt;C-o&gt;l', '2013-07-10', '2013-07-10'),
(282, 0, 'Enter a normal command when in insert mode\n', 'inoremap &lt;C-f&gt; &lt;C-o&gt;', '2013-07-10', '2013-07-10'),
(283, 0, 'Easy window navigation\n', 'map &lt;c-h&gt; &lt;c-w&gt;h\r\nmap &lt;c-j&gt; &lt;c-w&gt;j\r\nmap &lt;c-k&gt; &lt;c-w&gt;k\r\nmap &lt;c-l&gt; &lt;c-w&gt;l', '2013-07-10', '2013-07-10'),
(284, 0, 'Easy tab navigation\n', 'map &lt;s-l&gt; :tabnext&lt;cr&gt;\r\nmap &lt;s-h&gt; :tabprevious&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(285, 0, 'Force saving files that require root permissions\n', '&quot; use :W to force saving a file\r\ncom! W :w !sudo tee %', '2013-07-10', '2013-07-10'),
(286, 0, 'Center search\n', '&quot; center search\r\nnmap n nzz\r\nnmap N Nzz', '2013-07-10', '2013-07-10'),
(287, 0, 'Better tag navigation\n', 'nnoremap &lt;Return&gt; &lt;C-]&gt;\r\nnnoremap &lt;leader&gt;b &lt;C-o&gt;', '2013-07-10', '2013-07-10'),
(288, 0, 'Change current path to find files recursively\n', 'au! BufEnter * silent! let &amp;path = expand(''%:p:h'') . ''/**''', '2013-07-10', '2013-07-10'),
(289, 0, 'safdsdsf\n', 'sddsfdfs', '2013-07-10', '2013-07-10'),
(290, 0, 'Equally resize splits on window resize\n', '&quot; equally resize splits on window resize\r\nau VimResized * wincmd=', '2013-07-10', '2013-07-10'),
(291, 0, 'Color in text files\n', 'autocmd FileType text set filetype=markdown', '2013-07-10', '2013-07-10'),
(292, 0, 'Maximize vim window\n', '&quot; maximize vim window\r\ncom! MAX :let &amp;lines=500&lt;bar&gt;let &amp;columns=500\r\nmap &lt;leader&gt;m :MAX&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(293, 0, 'Move the cursor in insert mode\n', '&quot; move the cursor in insert mode\r\nimap &lt;c-h&gt; &lt;c-o&gt;h\r\nimap &lt;c-j&gt; &lt;c-o&gt;j\r\nimap &lt;c-k&gt; &lt;c-o&gt;k\r\nimap &lt;c-l&gt; &lt;c-o&gt;l', '2013-07-10', '2013-07-10'),
(294, 0, 'Activate automatic tags generation\n', 'nnoremap &lt;leader&gt;&lt;CR&gt; :autocmd BufWritePost * call system(&quot;ctags -R&quot;)&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(295, 0, 'GVim options to make it look like Vim\n', 'set guioptions+=c\r\nset guioptions+=R\r\nset guioptions-=m\r\nset guioptions-=r\r\nset guioptions-=b\r\nset guioptions-=T\r\nset guioptions-=R\r\nset guioptions-=L\r\nset guioptions-=e', '2013-07-10', '2013-07-10'),
(296, 0, 'Join lines with cursor staying in place\n', '&quot; join lines with cursor staying in place\r\nnnoremap J mzJ`z', '2013-07-10', '2013-07-10'),
(297, 0, 'Easy indent/outdent in normal mode\n', '&quot; easy indent/outdent\r\nnnoremap &lt; &lt;&lt;\r\nnnoremap &gt; &gt;&gt;', '2013-07-10', '2013-07-10'),
(298, 0, 'LaTeX Compile and Show\n', '&quot;Compiles LaTeX File in background\r\nnmap &lt;leader&gt;cl :! runlatex % &gt; logfile 2&gt;&amp;1 &amp;&lt;CR&gt;&lt;CR&gt;\r\n&quot;Open up pdf associated with current LaTeX file\r\nnmap &lt;leader&gt;ol :! okular %:r.pdf &gt; /dev/null 2&gt;&amp;1 &amp;&lt;CR&gt;&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(299, 0, 'Fast open buffer\n', 'nmap &lt;c-o&gt; :ls&lt;cr&gt;:e #', '2013-07-10', '2013-07-10'),
(300, 0, 'Toggle cursor at line beginnings/endings with whitespace\n', 'function! ToggleHomeKey()\r\n  let l:col = col(''.'')            &quot; current pos\r\n                                  &quot; goto non whitespace start of line\r\n  execute ''normal! ^''\r\n  if col(''.'') == l:col            &quot; if current pos == non whitespace start of line\r\n    call cursor(line(''.''), 1)     &quot; move to beginning\r\n  endif\r\nendfun\r\n\r\nfunction! ToggleEndKey()\r\n  let l:col = col(''.'')            &quot; current pos\r\n                                  &quot; goto non whitespace end of line\r\n  execute ''normal! g_''\r\n  if col(''.'') == l:col            &quot; if current pos == non whitespace EOL\r\n                                  &quot; move to whitespace EOL\r\n    execute ''normal! $''\r\n  endif\r\nendfun\r\n\r\nnnoremap &lt;silent&gt;H :call ToggleHomeKey()&lt;CR&gt;\r\nnnoremap &lt;silent&gt;L :call ToggleEndKey()&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(301, 0, 'quick split and switch to the new split\n', 'map &lt;Leader&gt;sv &lt;c-w&gt;v&lt;c-w&gt;l\r\nmap &lt;Leader&gt;sh &lt;c-w&gt;s&lt;c-w&gt;j', '2013-07-10', '2013-07-10'),
(302, 0, 'Google the word under the cursor\n', 'nnoremap gl :set operatorfunc=GoogleOperator&lt;cr&gt;g@\r\nvnoremap gl :&lt;c-u&gt;call GoogleOperator(visualmode())&lt;cr&gt;\r\n\r\nfunction! GoogleOperator(type)\r\n  let saved_register = @@\r\n  if a:type ==# ''v''\r\n    normal! `&lt;v`&gt;y\r\n  elseif a:type ==# ''char''\r\n    normal! `[v`]y\r\n  else\r\n    return\r\n  endif\r\n  silent execute &quot;! open &quot; . shellescape(&quot;https://www.google.com/search?q=&quot; . @@)\r\n  let @@ = saved_register\r\n  redraw!\r\nendfunction', '2013-07-10', '2013-07-10'),
(303, 0, 'Fast File Browser\n', 'nmap ,, :e.&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(304, 0, 'Continuous delimiter line\n', 'set fillchars=vert:┃,diff:⎼,fold:⎼', '2013-07-10', '2013-07-10'),
(305, 0, 'Quick buffer navigation\n', 'nnoremap gb :buffers&lt;CR&gt;:sb&lt;Space&gt;', '2013-07-10', '2013-07-10'),
(306, 0, 'Append a semicolon and come back\n', 'inoremap &lt;leader&gt;; &lt;C-o&gt;m`&lt;C-o&gt;A;&lt;C-o&gt;``', '2013-07-10', '2013-07-10'),
(307, 0, '&quot;Jump to definition&quot; and &quot;preview definition&quot; for JavaScript\n', 'nnoremap &lt;leader&gt;] :tjump /&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;&lt;cr&gt;\r\nnnoremap &lt;leader&gt;} :ptag /&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(308, 0, 'Quick edit\n', 'nnoremap &lt;leader&gt;o *Ncgn', '2013-07-10', '2013-07-10'),
(309, 0, 'Quick substitution\n', 'nnoremap &lt;leader&gt;r :''{,''}s/&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;/', '2013-07-10', '2013-07-10'),
(310, 0, 'Quick visual mode substitution\n', 'nnoremap &lt;leader&gt;s *N\r\nxnoremap &lt;leader&gt;s &quot;*y&lt;Esc&gt;:let @/ = substitute(escape(@*, ''\\/.*$^~[]''), &quot;\\n&quot;, ''\\\\n'', &quot;g&quot;) &lt;bar&gt; echo @/&lt;cr&gt;\r\n\r\nxnoremap &lt;leader&gt;r :s/&lt;c-r&gt;=expand(@/)&lt;cr&gt;/', '2013-07-10', '2013-07-10'),
(311, 0, 'Toggle folds with Space\n', 'nnoremap &lt;silent&gt; &lt;Space&gt; :exe ''silent! normal! za''.(foldlevel(''.'') ? '''' : ''l'')&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(312, 0, 'Repeat previous command with a bang\n', 'nnoremap &lt;Leader&gt;! q:kWgea!&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(313, 0, 'Map leader to space bar\n', 'let mapleader=&quot; &quot;', '2013-07-10', '2013-07-10'),
(314, 0, 'Command-line mode with double space\n', 'let mapleader=&quot; &quot;\r\nnoremap &lt;leader&gt;&lt;space&gt; :', '2013-07-10', '2013-07-10'),
(315, 0, 'C-q to escape from all modes\n', 'inoremap &lt;C-q&gt; &lt;Esc&gt;\r\nnoremap &lt;C-q&gt; &lt;Esc&gt;\r\nvnoremap &lt;C-q&gt; &lt;Esc&gt;\r\ncmap &lt;C-q&gt; &lt;C-c&gt;', '2013-07-10', '2013-07-10'),
(316, 0, 'Move in omni pop-up with C-j/k\n', 'function! OmniPopup(action)\r\n    if pumvisible()\r\n        if a:action == ''j''\r\n            return &quot;\\&lt;C-N&gt;&quot;\r\n        elseif a:action == ''k''\r\n            return &quot;\\&lt;C-P&gt;&quot;\r\n        endif\r\n    endif\r\n    return a:action\r\nendfunction\r\ninoremap &lt;silent&gt;&lt;C-j&gt; &lt;C-R&gt;=OmniPopup(''j'')&lt;CR&gt;\r\ninoremap &lt;silent&gt;&lt;C-k&gt; &lt;C-R&gt;=OmniPopup(''k'')&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(317, 0, 'Scroll the screen with the cursor movements\n', 'noremap &lt;C-j&gt; j&lt;C-e&gt;\r\nnoremap &lt;C-k&gt; k&lt;C-y&gt;', '2013-07-10', '2013-07-10'),
(318, 0, 'Go to the beginning / end of line in the insert mode\n', 'inoremap &lt;C-a&gt; &lt;Home&gt;\r\ninoremap &lt;C-e&gt; &lt;End&gt;', '2013-07-10', '2013-07-10'),
(319, 0, 'Delete a word forward in the insert mode\n', 'inoremap &lt;C-d&gt; &lt;C-o&gt;dw', '2013-07-10', '2013-07-10'),
(320, 0, 'Kill vim\n', '&quot; force quit\r\nmap &lt;silent&gt; &lt;leader&gt;k :qa!&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(321, 0, 'Open all buffers in tabs\n', '&quot; open all buffers in tabs (gui)\r\nmap &lt;silent&gt; &lt;leader&gt;tb :tab :ball&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(322, 0, 'retab and save\n', '&quot; retab and save\r\nmap &lt;leader&gt;rt :retab!&lt;bar&gt;:w&lt;cr&gt;', '2013-07-10', '2013-07-10'),
(323, 0, 'Move splits around\n', '&quot; move splits around\r\nnn &lt;leader&gt;sl &lt;c-w&gt;&lt;s-h&gt;\r\nnn &lt;leader&gt;sr &lt;c-w&gt;&lt;s-l&gt;\r\nnn &lt;leader&gt;sb &lt;c-w&gt;&lt;s-j&gt;\r\nnn &lt;leader&gt;st &lt;c-w&gt;&lt;s-k&gt;', '2013-07-10', '2013-07-10'),
(324, 0, 'Open existing buffer in a new tab\n', '&quot; open existing buffer in a newtab\r\nmap &lt;leader&gt;te :ls&lt;cr&gt;:tabedit #', '2013-07-10', '2013-07-10'),
(325, 0, 'Bash like file auto-complete\n', '&quot; nice bash-like filename auto-complete\r\nset wildmode=longest,list,full\r\nset wildmenu', '2013-07-10', '2013-07-10'),
(326, 0, 'File explorer tree-style\n', '&quot; see file explorer in tree style\r\nlet g:netrw_liststyle=3', '2013-07-10', '2013-07-10'),
(327, 0, 'Toggle Ctags window\n', 'noremap   &lt;silent&gt; &lt;C-g&gt; :TlistToggle&lt;CR&gt;', '2013-07-10', '2013-07-10'),
(328, 0, 'Tab/Split Navigation\n', 'nnoremap &lt;Tab&gt; gt\r\nnnoremap &lt;S-Tab&gt; gT\r\nnnoremap &lt;Space&gt; &lt;C-w&gt;w\r\nnnoremap &lt;S-Space&gt; &lt;C-w&gt;W', '2013-07-10', '2013-07-10'),
(329, 0, 'Arrow keys like other text editors\n', 'nnoremap &lt;up&gt; gk\r\nnnoremap &lt;down&gt; gj', '2013-07-10', '2013-07-10'),
(330, 0, 'Command-line mode with the enter key\n', 'noremap &lt;CR&gt; :', '2013-07-10', '2013-07-10'),
(331, 0, 'Tab insert with supertab\n', 'inoremap &lt;Leader&gt;&lt;tab&gt; &lt;c-v&gt;&lt;tab&gt;', '2013-07-10', '2013-07-10'),
(332, 0, 'Move current visual selection up or down\n', 'vnoremap &lt;C-n&gt; &lt;esc&gt;`&lt;gv:m ''&lt;-2&lt;cr&gt;gv                                                     \r\nvnoremap &lt;C-m&gt; &lt;esc&gt;`&gt;gv:m ''&gt;+1&lt;cr&gt;gv\r\n&quot; Or a single line in normal mode\r\nnnoremap &lt;C-n&gt; mz:m+&lt;cr&gt;`z\r\nnnoremap &lt;C-m&gt; mz:m-2&lt;cr&gt;`z', '2013-07-10', '2013-07-10'),
(333, 0, 'Turn off arrow keys\n', 'nnoremap &lt;up&gt; &lt;nop&gt;\r\nnnoremap &lt;down&gt; &lt;nop&gt;\r\nnnoremap &lt;left&gt; &lt;nop&gt;\r\nnnoremap &lt;right&gt; &lt;nop&gt;\r\ninoremap &lt;up&gt; &lt;nop&gt;\r\ninoremap &lt;down&gt; &lt;nop&gt;\r\ninoremap &lt;left&gt; &lt;nop&gt;\r\ninoremap &lt;right&gt; &lt;nop&gt;', '2013-07-11', '2013-07-11'),
(334, 0, 'Use system clipboard for copy and paste\n', 'set clipboard=unnamed', '2013-07-11', '2013-07-11'),
(335, 0, 'Easy split navigation\n', 'nnoremap &lt;C-h&gt; &lt;C-w&gt;h\r\nnnoremap &lt;C-j&gt; &lt;C-w&gt;j\r\nnnoremap &lt;C-k&gt; &lt;C-w&gt;k\r\nnnoremap &lt;C-l&gt; &lt;C-w&gt;l', '2013-07-11', '2013-07-11'),
(336, 0, 'Make Y behave like other capitals\n', 'map Y y$', '2013-07-11', '2013-07-11'),
(337, 0, 'Underline/overline current line\n', 'nnoremap &lt;leader&gt;== yyPv$r=jyypv$r=\r\nnnoremap &lt;leader&gt;** yyPv$r*jyypv$r*\r\nnnoremap &lt;leader&gt;=  yypv$r=\r\nnnoremap &lt;leader&gt;-  yypv$r-\r\nnnoremap &lt;leader&gt;^  yypv$r^\r\nnnoremap &lt;leader&gt;&quot;  yypv$r&quot;</pre>\n</p>\n<p>\n<pre><code>This sample line\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>This sample line\n----------------\n</code>', '2013-07-11', '2013-07-11'),
(338, 0, 'Use jk as &lt;Esc&gt; alternative\n', 'inoremap jk &lt;Esc&gt;', '2013-07-11', '2013-07-11'),
(339, 0, 'Jump to start and end of line using the home row keys\n', 'noremap H ^\r\nnoremap L $', '2013-07-11', '2013-07-11'),
(340, 0, 'Use sane regexes\n', 'nnoremap / /\\v\r\nvnoremap / /\\v', '2013-07-11', '2013-07-11'),
(341, 0, 'Search for the word under the cursor\n', '&quot; Highlight word at cursor without changing position\r\nnnoremap &lt;leader&gt;h *&lt;C-O&gt;\r\n&quot; Highlight word at cursor and then Ack it.\r\nnnoremap &lt;leader&gt;H *&lt;C-O&gt;:AckFromSearch!&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(342, 0, 'Reselect visual block after indent/outdent\n', 'vnoremap &lt; &lt;gv\r\nvnoremap &gt; &gt;gv', '2013-07-11', '2013-07-11'),
(343, 0, 'Clear search highlights\n', 'noremap &lt;silent&gt;&lt;Leader&gt;/ :nohls&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(344, 0, 'Open last/alternate buffer\n', 'noremap &lt;Leader&gt;&lt;Leader&gt; &lt;C-^&gt;', '2013-07-11', '2013-07-11'),
(345, 0, 'Source a single line of Vimscript\n', 'nnoremap &lt;Leader&gt;S ^vg_y:execute @@&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(346, 0, 'Save and return to normal mode on FocusLost\n', 'au FocusLost * :silent! wall                 &quot; Save on FocusLost\r\nau FocusLost * call feedkeys(&quot;\\&lt;C-\\&gt;\\&lt;C-n&gt;&quot;) &quot; Return to normal mode on FocustLost', '2013-07-11', '2013-07-11'),
(347, 0, 'Improve up/down movement on wrapped lines\n', 'nnoremap j gj\r\nnnoremap k gk', '2013-07-11', '2013-07-11'),
(348, 0, 'Toggle invisibles\n', 'noremap &lt;Leader&gt;i :set list!&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(349, 0, 'Better comand-line editing\n', 'cnoremap &lt;C-j&gt; &lt;t_kd&gt;\r\ncnoremap &lt;C-k&gt; &lt;t_ku&gt;\r\ncnoremap &lt;C-a&gt; &lt;Home&gt;\r\ncnoremap &lt;C-e&gt; &lt;End&gt;', '2013-07-11', '2013-07-11'),
(350, 0, 'Toggle relative line numbering\n', 'function! NumberToggle()\r\n  if(&amp;relativenumber == 1)\r\n    set number\r\n  else\r\n    set relativenumber\r\n  endif\r\nendfunc\r\nnnoremap &lt;C-n&gt; :call NumberToggle()&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(351, 0, 'Easily Edit VIMRC\n', 'nnoremap &lt;leader&gt;ev :tabedit $MYVIMRC&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(352, 0, 'Easily Source VIMRC\n', 'nnoremap &lt;leader&gt;sv :so $MYVIMRC&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(353, 0, 'Reformat and Tidy XML Files\n', 'nnoremap &lt;F2&gt; :silent 1,$!xmllint --format --recover - 2&gt;/dev/null&lt;cr&gt;\r\n\r\n# for windows, download xmllint software:\r\n# http://code.google.com/p/xmllint/\r\n# and use below\r\n\r\n# nnoremap &lt;F2&gt; :silent 1,$!xmllint %&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(354, 0, 'Use jj to Escape\n', 'inoremap jj &lt;esc&gt;', '2013-07-11', '2013-07-11'),
(355, 0, 'Force Saving Files that Require Root Permission\n', 'cmap w!! %!sudo tee &gt; /dev/null %', '2013-07-11', '2013-07-11'),
(356, 0, 'Use tab for auto completion\n', 'function! SuperTab()\r\n    if (strpart(getline(''.''),col(''.'')-2,1)=~''^\\W\\?$'')\r\n        return &quot;\\&lt;Tab&gt;&quot;\r\n    else\r\n        return &quot;\\&lt;C-n&gt;&quot;\r\n    endif\r\nendfunction\r\nimap &lt;Tab&gt; &lt;C-R&gt;=SuperTab()&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(357, 0, 'Remove All the Trailing Whitespaces\n', 'nnoremap &lt;leader&gt;W :%s/\\s\\+$//&lt;cr&gt;:let @/=''''&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(358, 0, 'Retab and Format the File with Spaces\n', 'nnoremap &lt;leader&gt;T :set expandtab&lt;cr&gt;:retab!&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(359, 0, 'Toggle Search Highlights\n', 'noremap &lt;space&gt; :set hlsearch! hlsearch?&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(360, 0, 'Swipe Between Buffers\n', 'set hidden\r\n    map &lt;SwipeLeft&gt; :bprev&lt;CR&gt;\r\n    map &lt;SwipeRight&gt; :bnext&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(361, 0, 'Custom Invisibles\n', 'set list\r\nset listchars=tab:▸\\ ,eol:¬,trail:⋅,extends:❯,precedes:❮\r\nset showbreak=↪', '2013-07-11', '2013-07-11'),
(362, 0, 'PHP Lint and Execute\n', 'map &lt;Leader&gt;p :! php -l %&lt;CR&gt;\r\nmap &lt;Leader&gt;P :! php -q %&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(363, 0, 'Toggle Paste\n', 'set pastetoggle=&lt;F8&gt; &quot;enable paste toggle and map it to F8', '2013-07-11', '2013-07-11'),
(364, 0, 'Cool MacVIM settings\n', 'if has(&quot;gui_macvim&quot;)\r\n    set transparency=15\r\n    set guifont=Monaco:h10\r\n    set noantialias\r\nendif', '2013-07-11', '2013-07-11'),
(365, 0, 'Custom File Templates\n', 'au! BufNewFile * silent! 0r $HOME/.vim/skel/template.%:e', '2013-07-11', '2013-07-11'),
(366, 0, 'cd into the dir that the file is in\n', 'autocmd BufEnter * execute &quot;chdir &quot;.escape(expand(&quot;%:p:h&quot;), '' '')', '2013-07-11', '2013-07-11'),
(367, 0, 'Fix indenting without moving cursor\n', 'noremap &lt;F1&gt; mzgg=G`zzz', '2013-07-11', '2013-07-11'),
(368, 0, 'Restore cursor position when opening file\n', 'augroup JumpCursorOnEdit\r\nau!\r\nautocmd BufReadPost *\r\n\\ if expand(&quot;&lt;afile&gt;:p:h&quot;) !=? $TEMP |\r\n\\   if line(&quot;''\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;''\\&quot;&quot;) &lt;= line(&quot;$&quot;) |\r\n\\     let JumpCursorOnEdit_foo = line(&quot;''\\&quot;&quot;) |\r\n\\     let b:doopenfold = 1 |\r\n\\     if (foldlevel(JumpCursorOnEdit_foo) &gt; foldlevel(JumpCursorOnEdit_foo - 1)) |\r\n\\        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |\r\n\\        let b:doopenfold = 2 |\r\n\\     endif |\r\n\\     exe JumpCursorOnEdit_foo |\r\n\\   endif |\r\n\\ endif\r\n&quot; Need to postpone using &quot;zv&quot; until after reading the modelines.\r\nautocmd BufWinEnter *\r\n\\ if exists(&quot;b:doopenfold&quot;) |\r\n\\   exe &quot;normal zv&quot; |\r\n\\   if(b:doopenfold &gt; 1) |\r\n\\       exe  &quot;+&quot;.1 |\r\n\\   endif |\r\n\\   unlet b:doopenfold |\r\n\\ endif\r\naugroup END', '2013-07-11', '2013-07-11'),
(369, 0, 'toggle a boolean option\n', 'nmap &lt;silent&gt; &lt;leader&gt;h :set hlsearch! hlsearch?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;l :set list! list?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;n :set number! number?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;p :set paste! paste?&lt;CR&gt;\r\nnmap &lt;silent&gt; &lt;leader&gt;w :set wrap! wrap?&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(370, 0, 'Select all text in current buffer\n', '&quot; select all\r\nmap &lt;Leader&gt;a ggVG', '2013-07-11', '2013-07-11'),
(371, 0, 'Mappings for Tab Management\n', 'nnoremap &lt;Leader&gt;tc :tabc&lt;return&gt;\r\nnnoremap &lt;Leader&gt;tn :tabn&lt;return&gt;\r\nnnoremap &lt;Leader&gt;tp :tabp&lt;return&gt;\r\nnnoremap &lt;Leader&gt;te :tabe&lt;space&gt;', '2013-07-11', '2013-07-11'),
(372, 0, 'Run Python Code from Vim \n', 'map &lt;f5&gt; :w &lt;CR&gt;!clear &lt;CR&gt;:!python % &lt;CR&gt;', '2013-07-11', '2013-07-11'),
(373, 0, 'Use arrow keys to move text\n', 'noremap &lt;Up&gt;     ddkP\r\nnoremap &lt;Down&gt;   ddp \r\nnoremap &lt;Left&gt;   &lt;&lt;  \r\nnoremap &lt;Right&gt;  &gt;&gt;', '2013-07-11', '2013-07-11'),
(374, 0, 'Use file basename for the Tab label\n', 'function GuiTabLabel()\r\n      let bufnrlist = tabpagebuflist(v:lnum)\r\n      let bufId = bufnrlist[tabpagewinnr(v:lnum) - 1]\r\n      let fn = bufname(bufId)\r\n      let lastSlash = strridx(fn, ''/'')\r\n      return strpart(fn, lastSlash+1, strlen(fn))\r\nendfunction\r\n\r\nif v:version &gt;= 700\r\n      set guitablabel=%{GuiTabLabel()}\r\nendif', '2013-07-11', '2013-07-11'),
(375, 0, 'Toggle Any Vim Option\n', 'Vim lets you toggle any option with\r\n:set inv{option}\r\n\r\nUse this mapping to toggle line numbers, for example\r\nnmap &lt;leader&gt;l :set invnu&lt;CR&gt;\r\n\r\n:help options', '2013-07-11', '2013-07-11'),
(376, 0, 'Remap leader to comma\n', 'let mapleader = &quot;,&quot;', '2013-07-11', '2013-07-11'),
(377, 0, 'Map ii to Esc\n', 'imap ii &lt;Esc&gt;', '2013-07-11', '2013-07-11'),
(378, 0, 'Force files ending in one extension to be treated as if they ended with another extension\n', 'au BufRead,BufNewFile *.sls set filetype=yaml', '2013-07-11', '2013-07-11'),
(379, 0, 'Hilight trailing whitespace\n', ':highlight TrailWhitespace ctermbg=red guibg=red\r\n:match TrailWhitespace /\\s\\+$\\| \\+\\ze\\t/', '2013-07-11', '2013-07-11'),
(380, 0, 'Set useful status line\n', 'set statusline=%F%m%r%h%w\\ [FORMAT=%{&amp;ff}]\\ [TYPE=%Y]\\ [ASCII=\\%03.3b]\\ [HEX=\\%02.2B]\\ [POS=%04l,%04v][%p%%]\\ [LEN=%L]', '2013-07-11', '2013-07-11'),
(381, 0, 'Remember where you were the last time you edited the file\n', 'au BufReadPost * if line(&quot;''\\&quot;&quot;) &gt; 0|if line(&quot;''\\&quot;&quot;) &lt;= line(&quot;$&quot;)|exe(&quot;norm ''\\&quot;&quot;)|else|exe &quot;norm $&quot;|endif|endif', '2013-07-11', '2013-07-11'),
(382, 0, 'Show syntax highlighting groups for word under cursor\n', 'nnoremap &lt;silent&gt; &lt;F10&gt; :call &lt;SID&gt;SynStack()&lt;CR&gt;\r\nfunction! &lt;SID&gt;SynStack()\r\n  if !exists(&quot;*synstack&quot;)\r\n    return\r\n  endif\r\n  echo map(synstack(line(''.''), col(''.'')), ''synIDattr(v:val, &quot;name&quot;)'')\r\nendfunc', '2013-07-11', '2013-07-11'),
(383, 0, 'Moving around through wrapped lines\n', 'vmap &lt;C-j&gt; gj\r\nvmap &lt;C-k&gt; gk\r\nvmap &lt;C-4&gt; g$\r\nvmap &lt;C-6&gt; g^\r\nvmap &lt;C-0&gt; g^\r\nnmap &lt;C-j&gt; gj\r\nnmap &lt;C-k&gt; gk\r\nnmap &lt;C-4&gt; g$\r\nnmap &lt;C-6&gt; g^\r\nnmap &lt;C-0&gt; g^', '2013-07-11', '2013-07-11'),
(384, 0, 'Visually Select by Words like windoze\n', 'imap &lt;C-S-Right&gt; &lt;C-O&gt;w\r\nvmap &lt;C-S-Right&gt; w\r\nnmap &lt;C-S-Right&gt; vw\r\n\r\nimap &lt;C-S-Left&gt; &lt;C-O&gt;b\r\nvmap &lt;C-S-Left&gt; b\r\nnmap &lt;C-S-Left&gt; vb', '2013-07-11', '2013-07-11'),
(385, 0, 'Wipe out all buffers\n', 'nmap &lt;silent&gt; &lt;leader&gt;bwa :1,9000bwipeout&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(386, 0, 'quick ls\n', 'nnoremap &lt;leader&gt;ls :ls&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(387, 0, 'Swap two words\n', 'nmap &lt;silent&gt; gw :s/\\(\\%#\\w\\+\\)\\(\\_W\\+\\)\\(\\w\\+\\)/\\3\\2\\1/&lt;CR&gt;`''', '2013-07-11', '2013-07-11'),
(388, 0, 'Shrink the current window to fit the number of lines in the buffer\n', 'nmap &lt;silent&gt; &lt;leader&gt;sw :execute &quot;:resize &quot; . line(''$'')&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(389, 0, 'toggle wrapping\n', 'nmap &lt;silent&gt; &lt;leader&gt;ww :set invwrap&lt;CR&gt;:set wrap?&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(390, 0, 'force period and parens to delineate words\n', 'set iskeyword-=\\.\r\nset iskeyword-=\\(\r\nset iskeyword-=\\)', '2013-07-11', '2013-07-11'),
(391, 0, 'greek digraphs\n', 'imap &lt;c-l&gt;&lt;c-a&gt; &lt;c-k&gt;a* &quot; Alpha\r\nimap &lt;c-l&gt;&lt;c-b&gt; &lt;c-k&gt;b* &quot; Beta\r\nimap &lt;c-l&gt;&lt;c-g&gt; &lt;c-k&gt;g* &quot; Gamma\r\nimap &lt;c-l&gt;&lt;c-d&gt; &lt;c-k&gt;d* &quot; Delta\r\nimap &lt;c-l&gt;&lt;c-e&gt; &lt;c-k&gt;e* &quot; Epslion\r\nimap &lt;c-l&gt;&lt;c-l&gt; &lt;c-k&gt;l* &quot; Lambda\r\nimap &lt;c-l&gt;&lt;c-y&gt; &lt;c-k&gt;y* &quot; Eta\r\nimap &lt;c-l&gt;&lt;c-h&gt; &lt;c-k&gt;h* &quot; Theta\r\nimap &lt;c-l&gt;&lt;c-m&gt; &lt;c-k&gt;m* &quot; Mu\r\nimap &lt;c-l&gt;&lt;c-r&gt; &lt;c-k&gt;r* &quot; Rho\r\nimap &lt;c-l&gt;&lt;c-p&gt; &lt;c-k&gt;p* &quot; Pi\r\nimap &lt;c-l&gt;&lt;c-f&gt; &lt;c-k&gt;f* &quot; Phi', '2013-07-11', '2013-07-11'),
(392, 0, 'Fix common spelling mistakes\n', 'iab teh       the\r\niab Teh       The', '2013-07-11', '2013-07-11'),
(393, 0, 'find merge conflict markers\n', 'nmap &lt;silent&gt; &lt;leader&gt;cf &lt;ESC&gt;/\\v^[&lt;=&gt;]{7}( .*\\|$)&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(394, 0, 'Auto-clean fugitive buffers\n', 'au BufReadPost fugitive://* set bufhidden=delete', '2013-07-11', '2013-07-11'),
(395, 0, 'Add a GUID to the current line \n', 'imap &lt;C-J&gt;d &lt;C-r&gt;=substitute(system(&quot;uuidgen&quot;), ''.$'', '''', ''g'')&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(396, 0, 'vimgrep shortcuts for current file\n', '&quot; Search the current file for what''s currently in the search register and display matches\r\nnmap &lt;silent&gt; &lt;leader&gt;gs :vimgrep /&lt;C-r&gt;// %&lt;CR&gt;:ccl&lt;CR&gt;:cwin&lt;CR&gt;&lt;C-W&gt;J:nohls&lt;CR&gt;\r\n\r\n&quot; Search the current file for the word under the cursor and display matches\r\nnmap &lt;silent&gt; &lt;leader&gt;gw :vimgrep /&lt;C-r&gt;&lt;C-w&gt;/ %&lt;CR&gt;:ccl&lt;CR&gt;:cwin&lt;CR&gt;&lt;C-W&gt;J:nohls&lt;CR&gt;\r\n\r\n&quot; Search the current file for the WORD under the cursor and display matches\r\nnmap &lt;silent&gt; &lt;leader&gt;gW :vimgrep /&lt;C-r&gt;&lt;C-a&gt;/ %&lt;CR&gt;:ccl&lt;CR&gt;:cwin&lt;CR&gt;&lt;C-W&gt;J:nohls&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(397, 0, 'Yank entire file into system register\n', 'nnoremap &lt;silent&gt; &lt;F2&gt; :%y*&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(398, 0, 'Replace entire buffer with system register contents\n', 'nnoremap &lt;silent&gt; &lt;S-F2&gt; :normal ggdG&quot;*PGgg&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(399, 0, 'Quick insertion of newline in normal mode\n', 'nnoremap &lt;silent&gt; &lt;CR&gt; :put=''''&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(400, 0, 'A more handy Esc\n', 'inoremap jj &lt;Esc&gt; &quot; Esc is so far away without this mapping...', '2013-07-11', '2013-07-11'),
(401, 0, 'Scroll the viewpoint faster\n', '&quot; Scroll the viewpoint faster\r\nnnoremap &lt;C-e&gt; 3&lt;C-e&gt; \r\nnnoremap &lt;C-y&gt; 3&lt;C-y&gt;', '2013-07-11', '2013-07-11'),
(402, 0, 'An informative status line\n', 'set statusline=%F%m%r%h%w\\ [type=%Y]\\ [%p%%]\\ [len=%L]\r\nset laststatus=2 &quot; Always show the statusline on the 2nd last row', '2013-07-11', '2013-07-11'),
(403, 0, 'adjust indentation width on the fly\n', '&quot; soft tabbing at 2, 4 and 8 spaces of width &quot;\r\nnnoremap &lt;leader&gt;2 &lt;esc&gt;:set expandtab tabstop=2 softtabstop=2 shiftwidth=2&lt;cr&gt;\r\nnnoremap &lt;leader&gt;4 &lt;esc&gt;:set expandtab tabstop=4 softtabstop=4 shiftwidth=4&lt;cr&gt;\r\nnnoremap &lt;leader&gt;8 &lt;esc&gt;:set expandtab tabstop=8 softtabstop=8 shiftwidth=8&lt;cr&gt;\r\n&quot; hard tabbing at 2, for and 8 spaces of width &quot;\r\nnnoremap &lt;leader&gt;&lt;leader&gt;2 &lt;esc&gt;:set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2&lt;cr&gt;\r\nnnoremap &lt;leader&gt;&lt;leader&gt;4 &lt;esc&gt;:set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4&lt;cr&gt;\r\nnnoremap &lt;leader&gt;&lt;leader&gt;8 &lt;esc&gt;:set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(404, 0, 'Automatically add multiple-inclusion guards to new C headers\n', 'function! s:headertemplate(name)\r\n    let guard=toupper(substitute(substitute(a:name, ''[^[:alnum:]]'', ''_'', ''g''), ''^[^[:alpha:]_]'', ''_&amp;'', ''''))\r\n    return &quot;#ifndef &quot; . guard . &quot;\\n#define &quot; . guard . &quot;\\n\\n\\n\\n#endif /* &quot; . guard . &quot; */&quot;\r\nendfunction\r\nautocmd BufNewFile *.h s@^$@\\=s:headertemplate(expand(''&lt;afile&gt;:t''))@ | 4', '2013-07-11', '2013-07-11'),
(405, 0, 'Swap &quot;jump to mark&quot; keys for convenience\n', '&quot; swap ` with '' because the '' key is closer and jumping to the character is more useful\r\nnnoremap '' `\r\nnnoremap ` ''', '2013-07-11', '2013-07-11'),
(406, 0, 'Easily expand/collapse all folds\n', '&quot; Folding\r\nnnoremap &lt;leader&gt;z &lt;esc&gt;:set foldlevel=10000&lt;cr&gt;\r\nnnoremap &lt;leader&gt;Z &lt;esc&gt;:set foldlevel=-10000&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(407, 0, 'mode switches between absolute and relative line numbers\n', '&quot; absolute line numbers in insert mode, relative otherwise for easy movement\r\nau InsertEnter * :set nu\r\nau InsertLeave * :set rnu', '2013-07-11', '2013-07-11'),
(408, 0, 'Set custom settings per filetype\n', 'set tabstop=2\r\nset shiftwidth=2\r\nset softtabstop=2\r\n\r\nif has(&quot;autocmd&quot;)\r\n  autocmd FileType python,xml,html,htmldjango setlocal tabstop=4\r\n  autocmd FileType python,xml,html,htmldjango setlocal shiftwidth=4\r\n  autocmd FileType python,xml,html,htmldjango setlocal softtabstop=4\r\nendif', '2013-07-11', '2013-07-11'),
(409, 0, 'Save file on focus lost\n', 'au FocusLost * :wa', '2013-07-11', '2013-07-11'),
(410, 0, 'Clear trailing white space\n', 'nnoremap &lt;silent&gt; &lt;C-k&gt; :let _s=@/&lt;Bar&gt;:%s/\\s\\+$//e&lt;Bar&gt;:let @/=_s&lt;Bar&gt;:nohl&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(411, 0, 'Use arrow key to change buffer\n', ':noremap &lt;left&gt; :bp&lt;CR&gt;\r\n:noremap &lt;right&gt; :bn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(412, 0, 'Open file under cursor in vertical split window\n', 'map &lt;Leader&gt;f :vertical wincmd f&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(413, 0, 'Run Rspec example under cursor\n', 'autocmd Filetype,BufNewFile *_spec.rb nmap &lt;Leader&gt;r :!bundle exec rspec %&lt;CR&gt;\r\nautocmd Filetype,BufNewFile *_spec.rb nmap &lt;Leader&gt;R :exe &quot;!bundle exec rspec %\\:&quot; . line(&quot;.&quot;)&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(414, 0, 'Home &amp; End with capitalized directions\n', '&quot; Go to home and end using capitalized directions\r\nnoremap H ^\r\nnoremap L $', '2013-07-11', '2013-07-11'),
(415, 0, 'Toggle paredit\n', 'command! Ptoggle call PareditToggle()', '2013-07-11', '2013-07-11'),
(416, 0, 'Drag Current Line/s Vertically\n', 'noremap &lt;A-j&gt; :m+&lt;CR&gt;\r\nnoremap &lt;A-k&gt; :m-2&lt;CR&gt;\r\ninoremap &lt;A-j&gt; &lt;Esc&gt;:m+&lt;CR&gt;\r\ninoremap &lt;A-k&gt; &lt;Esc&gt;:m-2&lt;CR&gt;\r\nvnoremap &lt;A-j&gt; :m''&gt;+&lt;CR&gt;gv\r\nvnoremap &lt;A-k&gt; :m-2&lt;CR&gt;gv', '2013-07-11', '2013-07-11'),
(417, 0, 'Search and replace word under cursor\n', '&quot; Search and replace word under cursor (,;)\r\n:nnoremap &lt;leader&gt;; :%s/\\&lt;&lt;C-r&gt;&lt;C-w&gt;\\&gt;//&lt;Left&gt;', '2013-07-11', '2013-07-11'),
(418, 0, 'Scroll before reaching the edge\n', '&quot; ****************** SCROLLING *********************  \r\n\r\nset scrolloff=8         &quot; Number of lines from vertical edge to start scrolling\r\nset sidescrolloff=15 &quot; Number of cols from horizontal edge to start scrolling\r\nset sidescroll=1       &quot; Number of cols to scroll at a time', '2013-07-11', '2013-07-11'),
(419, 0, 'Refresh syntax highlighting\n', '&quot; Ctrl-L recolors the screen when it gets confused.\r\nnoremap &lt;c-l&gt; &lt;c-l&gt;:syntax sync fromstart&lt;CR&gt;\r\ninoremap &lt;c-l&gt; &lt;esc&gt;&lt;c-l&gt;:syntax sync fromstart&lt;CR&gt;a', '2013-07-11', '2013-07-11'),
(420, 0, 'leader config\n', '&quot;change leader key\r\nlet mapleader='',''\r\n&quot;ever notice a slight lag after typing the leader key + command? This lowers the timeout.\r\nset timeoutlen=250', '2013-07-11', '2013-07-11'),
(421, 0, 'Next/previous in quickfix list\n', 'nnoremap &lt;c-n&gt; :cnext&lt;CR&gt;\r\nnnoremap &lt;c-p&gt; :cprevious&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(422, 0, 'Set separate colorscheme for terminal and gui\n', 'set background=dark\r\n&quot; Set base color scheme, will be used by term\r\ncolorscheme elflord\r\n&quot; If Vim enters guimode, set 256 color mode and change the colorscheme\r\nau GUIEnter * set t_Co=256\r\nau GUIEnter * colorscheme zenburn', '2013-07-11', '2013-07-11'),
(423, 0, 'Remove any trailing whitespace that is in the file\n', 'autocmd BufWrite * if ! &amp;bin | silent! %s/\\s\\+$//ge | endif', '2013-07-11', '2013-07-11'),
(424, 0, 'Try different potential backup directories\n', 'set backupdir=~/.vim-tmp,~/tmp,/var/tmp,$HOME/Local\\ Settings/Temp', '2013-07-11', '2013-07-11'),
(425, 0, 'Ack Motions\n', 'nnoremap &lt;silent&gt; \\a :set opfunc=&lt;SID&gt;AckMotion&lt;CR&gt;g@\r\nxnoremap &lt;silent&gt; \\a :&lt;C-U&gt;call &lt;SID&gt;AckMotion(visualmode())&lt;CR&gt;\r\n\r\nfunction! s:CopyMotionForType(type)\r\n    if a:type ==# ''v''\r\n        silent execute &quot;normal! `&lt;&quot; . a:type . &quot;`&gt;y&quot;\r\n    elseif a:type ==# ''char''\r\n        silent execute &quot;normal! `[v`]y&quot;\r\n    endif\r\nendfunction\r\n\r\nfunction! s:AckMotion(type) abort\r\n    let reg_save = @@\r\n\r\n    call s:CopyMotionForType(a:type)\r\n\r\n    execute &quot;normal! :Ack! --literal &quot; . shellescape(@@) . &quot;\\&lt;cr&gt;&quot;\r\n\r\n    let @@ = reg_save\r\nendfunction', '2013-07-11', '2013-07-11');
INSERT INTO `op_tips` (`tipsId`, `tipsUid`, `tipsTitle`, `tipsContent`, `tipsCtime`, `tipsUtime`) VALUES
(426, 0, 'Annotate mercurial changes of visual lines \n', 'vmap ,ga :&lt;C-U&gt;!hg annotate -udqc % \\| sed -n &lt;C-R&gt;=line(&quot;''&lt;&quot;) &lt;CR&gt;,&lt;C-R&gt;=line(&quot;''&gt;&quot;) &lt;CR&gt;p &lt;CR&gt;', '2013-07-11', '2013-07-11'),
(427, 0, 'Next buffer in new vertical split\n', 'nmap &lt;leader&gt;vl :rightbelow vert sbn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(428, 0, 'List backups of current file in the current directory\n', 'map &lt;leader&gt;b :!ls -l %*&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(429, 0, 'turn off normal arrow keys for navigation\n', 'noremap &lt;Up&gt; &lt;nop&gt;\r\nnoremap &lt;Down&gt; &lt;nop&gt;\r\nnoremap &lt;Left&gt; &lt;nop&gt;\r\nnoremap &lt;Right&gt; &lt;nop&gt;', '2013-07-11', '2013-07-11'),
(430, 0, 'Make v cycle through visual modes\n', '&quot; override v in visual mode to cycle modes\r\nvmap v :call CycleVisualMode()&lt;CR&gt;\r\nlet s:CycleVisualMode_running=0\r\nfunction! CycleVisualMode() range\r\n    let m = visualmode()\r\n    if m ==# ''v''\r\n        normal gvV\r\n    elseif m ==# ''V''\r\n        execute &quot;normal gv\\&lt;C-v&gt;&quot;\r\n    elseif m != ''''\r\n        vunmap v\r\n        normal gvv\r\n        vmap v :call CycleVisualMode()&lt;CR&gt;\r\n    endif\r\nendfunction', '2013-07-11', '2013-07-11'),
(431, 0, 'Indent/Outdent like Textmate\n', '&quot;bind command-] to indent\r\nnmap &lt;D-]&gt; &gt;&gt;\r\nvmap &lt;D-]&gt; &gt;gv\r\nimap &lt;D-]&gt; &lt;C-O&gt;&gt;&gt;\r\n\r\n&quot;bind command-[ to outdent\r\nnmap &lt;D-[&gt; &lt;&lt;\r\nvmap &lt;D-[&gt; &lt;gv\r\nimap &lt;D-[&gt; &lt;C-O&gt;&lt;&lt;', '2013-07-11', '2013-07-11'),
(432, 0, 'Comment like Textmate\n', 'nmap &lt;D-/&gt; &lt;leader&gt;ci &lt;CR&gt;\r\nvmap &lt;D-/&gt; &lt;leader&gt;ci &lt;CR&gt;\r\nimap &lt;D-/&gt; &lt;C-O&gt;&lt;leader&gt;ci', '2013-07-11', '2013-07-11'),
(433, 0, 'buffer navigation\n', '&quot; from https://github.com/eiro/rcfiles\r\n&quot; (consider set hidden)\r\nnoremap &lt;down&gt; :blast!&lt;cr&gt;\r\nnoremap &lt;right&gt; :bnext!&lt;cr&gt;\r\nnoremap &lt;left&gt; :bprevious!&lt;cr&gt;\r\nnoremap &lt;up&gt; :ls&lt;cr&gt;:buffer', '2013-07-11', '2013-07-11'),
(434, 0, 'Hilight active line \n', 'autocmd BufEnter * setlocal cursorline                                          \r\nautocmd BufWinLeave * setlocal nocursorline', '2013-07-11', '2013-07-11'),
(435, 0, 'Disable paste mode when leaving Insert Mode\n', 'au InsertLeave * set nopaste', '2013-07-11', '2013-07-11'),
(436, 0, 'From CoffeeScript to compiled JavaScript line\n', '&quot; :C&lt;line number&gt;                                                               \r\n&quot; Compile CoffeeScript buffer and open it in scratch buffer on given line       \r\n&quot; number                                                                        \r\ncommand -nargs=1 C CoffeeCompile | :&lt;args&gt;', '2013-07-11', '2013-07-11'),
(437, 0, 'Clear search highlighting with ESC\n', 'nnoremap &lt;esc&gt; :noh&lt;cr&gt;&lt;esc&gt;', '2013-07-11', '2013-07-11'),
(438, 0, 'Show Git diff in window split when commiting\n', 'autocmd FileType gitcommit DiffGitCached | wincmd p', '2013-07-11', '2013-07-11'),
(439, 0, 'Swap areas of text\n', 'vnoremap &lt;C-X&gt; &lt;Esc&gt;`.``gvP``P', '2013-07-11', '2013-07-11'),
(440, 0, 'Useful Abbreviations\n', '&quot; Usual Typos\r\nabbr teh the\r\nabbr hign hing\r\nabbr nign ning\r\nabbr lenght length\r\nabbr heigth height\r\nabbr widht width\r\n\r\n&quot; General text\r\nabbr lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis vulputate orci vitae justo sodales sollicitudin ornare augue ultricies. Proin volutpat, erat gravida congue scelerisque, dui leo malesuada ipsum, sit amet euismod turpis orci ut nunc. Mauris quam turpis, consectetur quis pulvinar vel, imperdiet posuere enim. Quisque nibh diam, eleifend quis mattis id, mollis tempus ipsum.\r\n\r\n&quot; Java\r\nabbr psvm public static void main(String[] args){&lt;CR&gt;}&lt;esc&gt;O\r\nabbr sout System.out.println(&quot;&quot;);&lt;esc&gt;2hi\r\nabbr psfs public static final String', '2013-07-11', '2013-07-11'),
(441, 0, 'Insert blank lines without going into insert mode\n', 'nmap t o&lt;ESC&gt;k\r\nnmap T O&lt;ESC&gt;j', '2013-07-11', '2013-07-11'),
(442, 0, 'Count words for LaTeX documents\n', 'nmap &lt;silent&gt; &lt;leader&gt;lwc :w&lt;CR&gt; :!detex % \\| wc -w&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(443, 0, 'Avoid Cmd-Tab/Q Perils\n', '# Can''t remap all menus in vimrc (MacVim menu), and other issues.\r\n# http://superuser.com/questions/249448/macvim-re-map-command-key-combinations-like-d-f', '2013-07-11', '2013-07-11'),
(444, 0, 'Shortcut save file\n', 'noremap &lt;C-S&gt; :w&lt;CR&gt;\r\nnoremap &lt;C-S&gt; &lt;ESC&gt;:w&lt;CR&gt;&lt;Insert&gt;', '2013-07-11', '2013-07-11'),
(445, 0, 'The Smash Escape\n', 'inoremap jk &lt;Esc&gt;\r\ninoremap kj &lt;Esc&gt;', '2013-07-11', '2013-07-11'),
(446, 0, 'Switch back to last file in buffer\n', 'nmap &lt;leader&gt;&lt;leader&gt; :b#&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(447, 0, 'go to middle of line\n', 'nnoremap gm :call cursor(0, len(getline(''.''))/2)&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(448, 0, 'Close a buffer quickly\n', 'noremap &lt;silent&gt; &lt;F3&gt; :bd!&lt;CR&gt;\r\nvnoremap &lt;silent&gt; &lt;F3&gt; &lt;C-C&gt;:bd!&lt;CR&gt;\r\ninoremap &lt;silent&gt; &lt;F3&gt; &lt;C-O&gt;:bd!&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(449, 0, 'autoclose completion window\n', '&quot;autoclose preview window\r\nif has(&quot;autocmd&quot;)\r\n    autocmd CursorMovedI * if pumvisible() == 0|pclose|endif\r\n    autocmd InsertLeave * if pumvisible() == 0|pclose|endif\r\nendif', '2013-07-11', '2013-07-11'),
(450, 0, 'Avoiding trailing white-space in Ruby files\n', 'autocmd BufWritePre {*.rb,*.js,*.coffee,*.scss,*.haml} :%s/\\s\\+$//e', '2013-07-11', '2013-07-11'),
(451, 0, 'Exit with keeping screen\n', 'nmap &lt;silent&gt; gZZ :set t_te= t_ti= &lt;cr&gt;:quit&lt;cr&gt;:set t_te&amp; t_ti&amp;&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(452, 0, 'Move/copy lines to the cursor postition \n', 'map &lt;Leader&gt;y	GY``kp\r\nmap &lt;Leader&gt;d	Gdd``kp', '2013-07-11', '2013-07-11'),
(453, 0, 'Auto indent after pasting\n', 'nnoremap &lt;leader&gt;p p                                                               \r\nnnoremap &lt;leader&gt;P P                                                               \r\nnnoremap p p''[v'']=                                                                 \r\nnnoremap P P''[v'']=', '2013-07-11', '2013-07-11'),
(454, 0, 'Toggle Relative Number\n', 'if exists(&quot;&amp;relativenumber&quot;)                                                    \r\n    set relativenumber\r\n    silent! autocmd InsertEnter * :set number                                   \r\n    silent! autocmd InsertLeave * :set relativenumber                           \r\n    silent! au FocusLost * :set number                                          \r\n    silent! au FocusGained * :set relativenumber                                \r\nendif', '2013-07-11', '2013-07-11'),
(455, 0, 'Restore cursor to last position on file open\n', '&quot; Tell vim to remember certain things when we exit\r\n&quot;  ''10  :  marks will be remembered for up to 10 previously edited files\r\n&quot;  &quot;100 :  will save up to 100 lines for each register\r\n&quot;  :20  :  up to 20 lines of command-line history will be remembered\r\n&quot;  %    :  saves and restores the buffer list\r\n&quot;  n... :  where to save the viminfo files\r\nset viminfo=''10,\\&quot;100,:20,%,n~/.viminfo\r\n\r\nfunction! ResCur()\r\n  if line(&quot;''\\&quot;&quot;) &lt;= line(&quot;$&quot;)\r\n    normal! g`&quot;\r\n    return 1\r\n  endif\r\nendfunction\r\n\r\naugroup resCur\r\n  autocmd!\r\n  autocmd BufWinEnter * call ResCur()\r\naugroup END', '2013-07-11', '2013-07-11'),
(456, 0, 'Highlight Trailing Whitespace\n', 'syntax on\r\nhighlight ExtraWhitespace ctermbg=darkgreen guibg=lightgreen                    \r\nautocmd Syntax * syn match ExtraWhitespace /\\s\\+$\\| \\+\\ze\\t/', '2013-07-11', '2013-07-11'),
(457, 0, 'Show Tabs and Carriage Returns\n', 'set list\r\nset listchars=tab:▸\\ ,eol:¬', '2013-07-11', '2013-07-11'),
(458, 0, 'Tabbing selected section\n', 'vmap &lt;Tab&gt; &gt;gv\r\nvmap &lt;S-Tab&gt; &lt;gv', '2013-07-11', '2013-07-11'),
(459, 0, 'Write with sudo\n', 'cnoremap w!! w !sudo tee % &gt;/dev/null', '2013-07-11', '2013-07-11'),
(460, 0, 'Expand path of current file in command mode\n', 'cnoremap %% &lt;C-R&gt;=expand(''%:h'').''/''&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(461, 0, 'Search/search word under cursor\n', 'nnoremap &lt;leader&gt;s :%s//&lt;left&gt;\r\nnnoremap &lt;Leader&gt;S :%s/&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;//c&lt;left&gt;&lt;left&gt;', '2013-07-11', '2013-07-11'),
(462, 0, 'Let cursor line always centered\n', 'set scrolloff=999', '2013-07-11', '2013-07-11'),
(463, 0, 'Show where replace area ends\n', 'set cpoptions+=$', '2013-07-11', '2013-07-11'),
(464, 0, 'Only have cursorline in current window\n', 'autocmd WinLeave * set nocursorline\r\nautocmd WinEnter * set cursorline', '2013-07-11', '2013-07-11'),
(465, 0, 'quick access to the NERDTree file browser\n', '&quot; https://github.com/scrooloose/nerdtree to download\r\n&quot; \\] to toggle the file browser\r\nnoremap &lt;silent&gt;\\] :NERDTreeToggle&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(466, 0, 'Easier increment/decrement\n', 'nnoremap + &lt;C-a&gt;\r\nnnoremap - &lt;C-x&gt;', '2013-07-11', '2013-07-11'),
(467, 0, 'Reformat/reflow a paragraph of text\n', 'set formatoptions=tcroql\r\nnnoremap Q gqap', '2013-07-11', '2013-07-11'),
(468, 0, 'Insert one character\n', 'nnoremap &lt;C-i&gt; :exec &quot;normal i&quot;.nr2char(getchar()).&quot;\\e&quot;&lt;CR&gt;\r\nnnoremap &lt;C-i&gt;a :exec &quot;normal a&quot;.nr2char(getchar()).&quot;\\e&quot;&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(469, 0, 'Switch between buffers\n', 'nnoremap &lt;silent&gt; &lt;C-PageUp&gt; :bp&lt;CR&gt;\r\nnnoremap &lt;silent&gt; &lt;C-PageDown&gt; :bn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(470, 0, 'Restore messed up Vim\n', 'map &lt;F5&gt; :redraw! \\| :noh \\| &lt;cr&gt;&lt;c-w&gt;=', '2013-07-11', '2013-07-11'),
(471, 0, 'Show current file in NERDTree\n', 'map &lt;silent&gt; &lt;C-s&gt; :NERDTree&lt;CR&gt;&lt;C-w&gt;p:NERDTreeFind&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(472, 0, 'Format Perl source with Perltidy\n', 'nmap &lt;F4&gt; :%!perltidy&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(473, 0, 'Map vim tabs to function keys\n', 'nmap &lt;F6&gt; :tabe \r\nnmap &lt;F7&gt; :tabp&lt;CR&gt;\r\nnmap &lt;F8&gt; :tabn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(474, 0, 'Run Perl script\n', 'nmap &lt;F5&gt; :!perl %&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(475, 0, 'Use Command-left/right to change buffer\n', 'noremap &lt;D-left&gt;  :bp&lt;CR&gt;\r\nnoremap &lt;D-right&gt; :bn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(476, 0, 'Hide toolbar and scrollbars in MacVim\n', 'set guioptions-=T\r\nset guioptions-=r', '2013-07-11', '2013-07-11'),
(477, 0, 'Capital W/Q same as w/q in command mode\n', 'cnoreabbrev W w\r\ncnoreabbrev Q q', '2013-07-11', '2013-07-11'),
(478, 0, 'Space to toggle folds\n', 'nnoremap &lt;Space&gt; za\r\nvnoremap &lt;Space&gt; za', '2013-07-11', '2013-07-11'),
(479, 0, 'Toggle between normal and and relative line numbers on &lt;leader&gt;l\n', 'nnoremap &lt;leader&gt;l :call ToggleRelativeAbsoluteNumber()&lt;CR&gt;\r\nfunction! ToggleRelativeAbsoluteNumber()\r\n  if &amp;number\r\n    set relativenumber\r\n  else\r\n    set number\r\n  endif\r\nendfunction', '2013-07-11', '2013-07-11'),
(480, 0, 'Copy current file path into system clipboard\n', 'nnoremap &lt;silent&gt; &lt;leader&gt;cf :let @* = expand(&quot;%:p&quot;)&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(481, 0, 'Resize splits when the window is resized\n', 'au VimResized * exe &quot;normal! \\&lt;c-w&gt;=&quot;', '2013-07-11', '2013-07-11'),
(482, 0, 'Save when losing focus\n', 'au FocusLost * :wa', '2013-07-11', '2013-07-11'),
(483, 0, 'Open file under cursor in new tab\n', 'map &lt;F9&gt; &lt;Esc&gt;&lt;C-W&gt;gF&lt;CR&gt;:tabm&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(484, 0, 'Resize splits when the window is resized\n', 'au VimResized * exe &quot;normal! \\&lt;c-w&gt;=&quot;', '2013-07-11', '2013-07-11'),
(485, 0, 'Spellcheck Git commit messages\n', 'autocmd BufRead COMMIT_EDITMSG setlocal spell!', '2013-07-11', '2013-07-11'),
(486, 0, 'Refresh Command-T index\n', 'map &lt;Leader&gt;&lt;D-t&gt; :CommandTFlush&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(487, 0, 'Remove Trailing Whitespace and return cursor position\n', '&quot;From http://vimcasts.org/episodes/tidying-whitespace/\r\n&quot;Preserves/Saves the state, executes a command, and returns to the saved state\r\nfunction! Preserve(command)\r\n  &quot; Preparation: save last search, and cursor position.\r\n  let _s=@/\r\n  let l = line(&quot;.&quot;)\r\n  let c = col(&quot;.&quot;)\r\n  &quot; Do the business:\r\n  execute a:command\r\n  &quot; Clean up: restore previous search history, and cursor position\r\n  let @/=_s\r\n  call cursor(l, c)\r\nendfunction\r\n&quot;strip all trailing white space\r\nnnoremap &lt;silent&gt; &lt;leader&gt;ws  :call Preserve(&quot;%s/\\\\s\\\\+$//e&quot;)&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(488, 0, 'Insert blank line below cursor in Normal Mode\n', 'nnoremap &lt;CR&gt; mpo&lt;ESC&gt;`p', '2013-07-11', '2013-07-11'),
(489, 0, 'Enable persistent undo\n', 'if exists(&quot;+undofile&quot;)\r\n    set udf\r\n    set undodir=~/.vimundo\r\nendif', '2013-07-11', '2013-07-11'),
(490, 0, 'Map Caps-Lock to Ctrl\n', 'Map Caps Lock to Ctrl in your OS. Trust me.', '2013-07-11', '2013-07-11'),
(491, 0, 'Reuse status as window title\n', 'let &amp;titlestring=&amp;statusline\r\nset titlestring+=\\ {%{v:servername}}', '2013-07-11', '2013-07-11'),
(492, 0, 'Revert file to previous state by time\n', '&quot;change file state to 15 minutes earlier&quot;\r\n:earlier 15m\r\n\r\n&quot;to jump to latest state&quot;\r\n:later', '2013-07-11', '2013-07-11'),
(493, 0, 'Insert Newlines Without Moving the Cursor\n', 'noremap &lt;S-ENTER&gt; O&lt;ESC&gt;j\r\nnoremap &lt;ENTER&gt; o&lt;ESC&gt;k', '2013-07-11', '2013-07-11'),
(494, 0, 'center buffer when opening files\n', '&quot; center buffer around cursor when opening files\r\nautocmd BufRead * normal zz', '2013-07-11', '2013-07-11'),
(495, 0, 'Test\n', '&quot; This is a test vimbit.\r\n\r\n&quot; It''s here so I can test some things with vimbit.', '2013-07-11', '2013-07-11'),
(496, 0, 'Expand Compressed HTML with Tidy\n', 'map &lt;leader&gt;td :%!tidy -q -config ~/.vim/tidy.conf --tidy-mark 0 2&gt;/dev/null&lt;CR&gt;&lt;ESC&gt;gg=G', '2013-07-11', '2013-07-11'),
(497, 0, 'Undo works after restarting vim\n', 'if exists(&quot;+undofile&quot;)\r\n  &quot; undofile - This allows you to use undos after exiting and restarting\r\n  &quot; This, like swap and backups, uses .vim-undo first, then ~/.vim/undo\r\n  &quot; :help undo-persistence\r\n  &quot; This is only present in 7.3+\r\n  if isdirectory($HOME . ''/.vim/undo'') == 0\r\n    :silent !mkdir -p ~/.vim/undo &gt; /dev/null 2&gt;&amp;1\r\n  endif\r\n  set undodir=./.vim-undo//\r\n  set undodir+=~/.vim/undo//\r\n  set undofile\r\nendif', '2013-07-11', '2013-07-11'),
(498, 0, 'Unify Mac cut-and-paste with vim\n', 'if version &gt;= 730 &amp;&amp; has(&quot;macunix&quot;)\r\n  &quot; Default yank and paste go to Mac''s clipboard\r\n  set clipboard=unnamed\r\nend', '2013-07-11', '2013-07-11'),
(499, 0, 'fast buffer switching\n', 'nmap &lt;F4&gt; :buffers&lt;CR&gt;buffer&lt;space&gt;', '2013-07-11', '2013-07-11'),
(500, 0, 'Open a Quickfix window for the last search\n', '&quot; Open a Quickfix window for the last search\r\nnnoremap &lt;silent&gt; &lt;leader&gt;/ :execute ''vimgrep /''.@/.''/g %''&lt;CR&gt;:copen&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(501, 0, 'Highlight all search matches\n', 'set hlsearch', '2013-07-11', '2013-07-11'),
(502, 0, 'No beep please\n', 'set noerrorbells\r\nset novisualbell\r\nautocmd VimEnter * set vb t_vb=', '2013-07-11', '2013-07-11'),
(503, 0, 'Save all open buffers when focus lost\n', 'autocmd BufLeave,FocusLost silent! wall', '2013-07-11', '2013-07-11'),
(504, 0, 'List characters\n', 'if has(&quot;gui&quot;)\r\n    set listchars=tab:»·\r\n    set list\r\nendif', '2013-07-11', '2013-07-11'),
(505, 0, 'Show text limit line\n', 'if (v:version &gt;=703)\r\n    set colorcolumn=100\r\n    hi ColorColumn ctermbg=red ctermfg=white guibg=#592929\r\nendif', '2013-07-11', '2013-07-11'),
(506, 0, 'Open new split windows to the right/bottom\n', 'set splitright splitbelow', '2013-07-11', '2013-07-11'),
(507, 0, 'JSON Formater \n', 'function! s:JSONize()\r\n    silent %!python -m json.tool\r\n    :exec&quot;:cal SetSyn(\\&quot;javascript\\&quot;)&quot;\r\nendfunction\r\n\r\ncommand! JSONize call s:JSONize() \r\n\r\nmap &lt;C-J&gt; :JSONize&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(508, 0, 'Map Q to repeat the last recorded macro\n', 'map Q @@', '2013-07-11', '2013-07-11'),
(509, 0, 'Add a line above or below current line without changing position or leaving mode\n', 'map &lt;leader&gt;o :set paste&lt;CR&gt;m`o&lt;Esc&gt;``:set nopaste&lt;CR&gt;\r\nmap &lt;leader&gt;O :set paste&lt;CR&gt;m`O&lt;Esc&gt;``:set nopaste&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(510, 0, 'Remove empty lines\n', '&quot; Remove empty lines\r\nnnoremap &lt;Leader&gt;d :g/^$/d&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(511, 0, 'Resize Vsplits on window resize\n', 'au VimResized * exe &quot;normal! \\&lt;c-w&gt;=&quot;', '2013-07-11', '2013-07-11'),
(512, 0, 'pastetoggle always available\n', '&quot; toggle paste outside INSERT mode &quot;\r\nmap &lt;Leader&gt;v :set invpaste&lt;CR&gt;:set paste?&lt;CR&gt; \r\n&quot; toggle paste in INSERT mode &quot;\r\nset pastetoggle=&lt;Leader&gt;v', '2013-07-11', '2013-07-11'),
(513, 0, 'update current working directory\n', 'autocmd BufEnter * lcd %:p:h', '2013-07-11', '2013-07-11'),
(514, 0, 'Add a threecents feedback form to HTML code\n', 'cnoremap tc exe &quot;r !curl http://threecents.elevenbasetwo.com/api/emails/&quot; . input(&quot;Email address: &quot;) . &quot;/script 2&gt; /dev/null&quot;&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(515, 0, 'tabp and tabn with your homerow left and right keys\n', 'map &lt;C-j&gt; :tabp&lt;CR&gt;\r\nmap &lt;C-k&gt; :tabn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(516, 0, 'Jump to start/end of lines with home row keys\n', '&quot; Jump to start and end of line using the home row keys\r\nmap H ^\r\nmap L $', '2013-07-11', '2013-07-11'),
(517, 0, 'Copy first non-blank to last non-blank character on a line\n', 'noremap YY ^yg_', '2013-07-11', '2013-07-11'),
(518, 0, 'More Text per Window\n', 'set linespace=-1 &quot;decrease LineHeight', '2013-07-11', '2013-07-11'),
(519, 0, 'Best Programming Font\n', 'set guifont=Consolas:h8:cANSI &quot;Windows only', '2013-07-11', '2013-07-11'),
(520, 0, 'Check the current PHP file syntax\n', 'fun! CheckPHPSyntax()\r\n    let error = substitute(system(&quot;php -l &quot; . expand(&quot;%&quot;) .  &quot; 2&gt;&amp;1 | sed ''s/.*\\ //g'' | head -n 1 | grep ''^[0-9]\\\\+$''&quot;), &quot;\\n&quot;, &quot;&quot;, &quot;&quot;)\r\n    if error\r\n        hi StatusLine ctermbg=231 ctermfg=196\r\n        exe &quot;normal&quot; error . &quot;gg&quot;\r\n    else\r\n        hi StatusLine ctermbg=253 ctermfg=238\r\n    endif\r\nendfunction\r\nau! BufWritePost *.php call CheckPHPSyntax()', '2013-07-11', '2013-07-11'),
(521, 0, 'Spacebar for page up/page down\n', 'nmap &lt;Space&gt; &lt;C-f&gt;\r\nnmap &lt;S-Space&gt; &lt;C-b&gt;\r\nnmap &lt;Backspace&gt; &lt;C-b&gt;', '2013-07-11', '2013-07-11'),
(522, 0, 'Remap seldom-used keys\n', 'nmap , &quot;+\r\nnmap s &lt;C-w&gt;\r\n&quot; other rarely used keys:\r\n&quot; nmap Q ... \r\n&quot; nmap + ... \r\n&quot; nmap _ ... \r\n&quot; nmap - ... \r\n&quot; nmap &lt;CR&gt; ... \r\n&quot; nmap S ...\r\n&quot; nmap K ...\r\n&quot; nmap &amp; ...', '2013-07-11', '2013-07-11'),
(523, 0, 'Fast paste mode toggle\n', 'nmap \\o :set paste!&lt;CR&gt;:set paste?&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(524, 0, 'Toggle between common tab modes\n', 'nmap \\M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4&lt;CR&gt;\r\nnmap \\m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2&lt;CR&gt;\r\nnmap \\t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4&lt;CR&gt;\r\nnmap \\T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(525, 0, 'Edit the previous buffer\n', 'nmap &lt;C-e&gt; :e#&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(526, 0, 'Emacs-like bindings in command line\n', 'cnoremap &lt;C-a&gt;  &lt;Home&gt;\r\ncnoremap &lt;C-b&gt;  &lt;Left&gt;\r\ncnoremap &lt;C-f&gt;  &lt;Right&gt;\r\ncnoremap &lt;C-d&gt;  &lt;Delete&gt;\r\ncnoremap &lt;M-b&gt;  &lt;S-Left&gt;\r\ncnoremap &lt;M-f&gt;  &lt;S-Right&gt;\r\ncnoremap &lt;M-d&gt;  &lt;S-right&gt;&lt;Delete&gt;\r\ncnoremap &lt;Esc&gt;b &lt;S-Left&gt;\r\ncnoremap &lt;Esc&gt;f &lt;S-Right&gt;\r\ncnoremap &lt;Esc&gt;d &lt;S-right&gt;&lt;Delete&gt;\r\ncnoremap &lt;C-g&gt;  &lt;C-c&gt;', '2013-07-11', '2013-07-11'),
(527, 0, 'Search for the word under the cursor in the current directory\n', 'nmap &lt;C-k&gt; :!clear; ack -C &quot;\\b&lt;cword&gt;\\b&quot; \\| less -FRX &lt;CR&gt;', '2013-07-11', '2013-07-11'),
(528, 0, 'Make j &amp; k linewise\n', 'map j gj\r\nmap k gk', '2013-07-11', '2013-07-11'),
(529, 0, 'Unicode list chars\n', 'set listchars=tab:▶\\ ,trail:◀,extends:»,precedes:«', '2013-07-11', '2013-07-11'),
(530, 0, 'Kill tabs and trailing space\n', 'command! CLEAN retab | %s/ \\+$//', '2013-07-11', '2013-07-11'),
(531, 0, 'Rename a buffer within Vim and on the disk\n', '&quot; Rename.vim  -  Rename a buffer within Vim and on the disk\r\n&quot; Copyright June 2007 by Christian J. Robinson &lt;infynity@onewest.net&gt;\r\n&quot; Distributed under the terms of the Vim license.  See &quot;:help license&quot;.\r\n&quot; http://www.infynity.spodzone.com/vim/Rename.vim\r\n&quot; Usage: :Rename[!] {newname}\r\ncommand! -nargs=* -complete=file -bang Rename :call Rename(&quot;&lt;args&gt;&quot;, &quot;&lt;bang&gt;&quot;)\r\nfunction! Rename(name, bang)\r\n    let l:curfile = expand(&quot;%:p&quot;)\r\n    let v:errmsg = &quot;&quot;\r\n    silent! exe &quot;saveas&quot; . a:bang . &quot; &quot; . a:name\r\n    if v:errmsg =~# ''^$\\|^E329''\r\n        if expand(&quot;%:p&quot;) !=# l:curfile &amp;&amp; filewritable(expand(&quot;%:p&quot;))\r\n            silent exe &quot;bwipe! &quot; . l:curfile\r\n            if delete(l:curfile)\r\n                echoerr &quot;Could not delete &quot; . l:curfile\r\n            endif\r\n        endif\r\n    else\r\n        echoerr v:errmsg\r\n    endif\r\nendfunction', '2013-07-11', '2013-07-11'),
(532, 0, 'Source a local vim configuration\n', 'source ~/.vimlocal', '2013-07-11', '2013-07-11'),
(533, 0, 'Default keys for tab switching\n', 'imap &lt;c-tab&gt; &lt;esc&gt;:tabn&lt;cr&gt;\r\nnmap &lt;c-tab&gt; :tabn&lt;cr&gt;\r\n\r\nimap &lt;c-s-tab&gt; &lt;esc&gt;:tabp&lt;cr&gt;\r\nnmap &lt;c-s-tab&gt; :tabp&lt;cr&gt;\r\n\r\nimap &lt;a-1&gt; &lt;esc&gt;:tabn 1&lt;cr&gt;\r\nnmap &lt;a-1&gt; :tabn 1&lt;cr&gt;\r\nimap &lt;a-2&gt; &lt;esc&gt;:tabn 2&lt;cr&gt;\r\nnmap &lt;a-2&gt; :tabn 2&lt;cr&gt;\r\nimap &lt;a-3&gt; &lt;esc&gt;:tabn 3&lt;cr&gt;\r\nnmap &lt;a-3&gt; :tabn 3&lt;cr&gt;\r\nimap &lt;a-4&gt; &lt;esc&gt;:tabn 4&lt;cr&gt;\r\nnmap &lt;a-4&gt; :tabn 4&lt;cr&gt;\r\nimap &lt;a-5&gt; &lt;esc&gt;:tabn 5&lt;cr&gt;\r\nnmap &lt;a-5&gt; :tabn 5&lt;cr&gt;\r\nimap &lt;a-6&gt; &lt;esc&gt;:tabn 6&lt;cr&gt;\r\nnmap &lt;a-6&gt; :tabn 6&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(534, 0, 'Window/Split Switching\n', 'noremap &lt;tab&gt; &lt;C-w&gt;w', '2013-07-11', '2013-07-11'),
(535, 0, 'Show Indent Guides\n', '&quot;show indent guides\r\nset lcs=tab:\\⁞\\ \r\nset list\r\n&quot;set tabwidth to 4\r\nset tabstop=4\r\nset softtabstop=4\r\nset shiftwidth=4', '2013-07-11', '2013-07-11'),
(536, 0, 'Shift W write to file\n', 'cnoreabbrev W w\r\ncnoreabbrev Q q\r\ncnoreabbrev Wq wq\r\ncnoreabbrev WQ wq', '2013-07-11', '2013-07-11'),
(537, 0, 'CopyMatches\n', '&quot; Copy matches of the last search to a register (default is the clipboard).\r\n&quot; Accepts a range (default is whole file).\r\n&quot; ''CopyMatches''   copy matches to clipboard (each match has \\n added).\r\n&quot; ''CopyMatches x'' copy matches to register x (clears register first).\r\n&quot; ''CopyMatches X'' append matches to register x.\r\n&quot; We skip empty hits to ensure patterns using ''\\ze'' don''t loop forever.\r\ncommand! -range=% -register CopyMatches call s:CopyMatches(&lt;line1&gt;, &lt;line2&gt;, ''&lt;reg&gt;'')\r\nfunction! s:CopyMatches(line1, line2, reg)\r\n  let hits = []\r\n  for line in range(a:line1, a:line2)\r\n    let txt = getline(line)\r\n    let idx = match(txt, @/)\r\n    while idx &gt;= 0\r\n      let end = matchend(txt, @/, idx)\r\n      if end &gt; idx\r\n	call add(hits, strpart(txt, idx, end-idx))\r\n      else\r\n	let end += 1\r\n      endif\r\n      if @/[0] == ''^''\r\n        break  &quot; to avoid false hits\r\n      endif\r\n      let idx = match(txt, @/, end)\r\n    endwhile\r\n  endfor\r\n  if len(hits) &gt; 0\r\n    let reg = empty(a:reg) ? ''+'' : a:reg\r\n    execute ''let @''.reg.'' = join(hits, &quot;\\n&quot;) . &quot;\\n&quot;''\r\n  else\r\n    echo ''No hits''\r\n  endif\r\nendfunction', '2013-07-11', '2013-07-11'),
(538, 0, 'join lines with cursor staying in place\n', ':nnoremap &lt;silent&gt; J :let p=getpos(''.'')&lt;bar&gt;join&lt;bar&gt;call setpos(''.'', p)&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(539, 0, 'Select Every Line\n', ':%y+', '2013-07-11', '2013-07-11'),
(540, 0, 'Useful Statusline\n', 'if has(''statusline'')\r\n   &quot; Status line detail:\r\n   &quot; %f     file path\r\n   &quot; %y     file type between braces (if defined)\r\n   &quot; %([%R%M]%)   read-only, modified and modifiable flags between braces\r\n   &quot; %{''!''[&amp;ff==''default_file_format'']}\r\n   &quot;        shows a ''!'' if the file format is not the platform\r\n   &quot;        default\r\n   &quot; %{''$''[!&amp;list]}  shows a ''*'' if in list mode\r\n   &quot; %{''~''[&amp;pm=='''']} shows a ''~'' if in patchmode\r\n   &quot; (%{synIDattr(synID(line(''.''),col(''.''),0),''name'')})\r\n   &quot;        only for debug : display the current syntax item name\r\n   &quot; %=     right-align following items\r\n   &quot; #%n    buffer number\r\n   &quot; %l/%L,%c%V   line number, total number of lines, and column number\r\n   function SetStatusLineStyle()\r\n      if &amp;stl == '''' || &amp;stl =~ ''synID''\r\n         let &amp;stl=&quot;%f %y%([%R%M]%)%{''!''[&amp;ff==''&quot;.&amp;ff.&quot;'']}%{''$''[!&amp;list]}%{''~''[&amp;pm=='''']}%=#%n %l/%L,%c%V &quot;\r\n      else\r\n         let &amp;stl=&quot;%f %y%([%R%M]%)%{''!''[&amp;ff==''&quot;.&amp;ff.&quot;'']}%{''$''[!&amp;list]} (%{synIDattr(synID(line(''.''),col(''.''),0),''name'')})%=#%n %l/%L,%c%V &quot;\r\n      endif\r\n   endfunc\r\n   &quot; Switch between the normal and vim-debug modes in the status line\r\n   nmap _ds :call SetStatusLineStyle()&lt;CR&gt;\r\n   call SetStatusLineStyle()\r\n   &quot; Window title\r\n   if has(''title'')\r\n      set titlestring=%t%(\\ [%R%M]%)\r\n   endif\r\nendif', '2013-07-11', '2013-07-11'),
(541, 0, 'Animate tab stop changes\n', 'function Tabanim(desired)\r\n  if a:desired &lt; &amp;tabstop\r\n    let direction = -1\r\n  else\r\n    let direction = 1\r\n  endif\r\n  while a:desired != &amp;tabstop\r\n    sleep 70m\r\n    let &amp;tabstop = &amp;tabstop + direction\r\n    redraw\r\n  endwhile\r\n  let &amp;shiftwidth = &amp;tabstop\r\nendfunction\r\n\r\nmap &lt;F9&gt; :call Tabanim(1)&lt;CR&gt;\r\nmap &lt;F8&gt; :call Tabanim(4)&lt;CR&gt;\r\nmap &lt;F10&gt; :call Tabanim(8)&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(542, 0, 'Tab completion in one line\n', 'inoremap &lt;expr&gt; &lt;Tab&gt; strpart(getline(''.''), col(''.'') - 2, 1) =~ ''\\w'' ? &quot;\\&lt;C-P&gt;&quot; : &quot;\\&lt;Tab&gt;&quot;', '2013-07-11', '2013-07-11'),
(543, 0, 'Run Django unit tests\n', 'cnoremap djt !./manage.py test&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(544, 0, 'Make Arrow Keys Useful\n', 'nmap &lt;up&gt;       :bp&lt;CR&gt;\r\nnmap &lt;down&gt;     :bn&lt;CR&gt;\r\nnmap &lt;left&gt;     :tabp&lt;CR&gt;\r\nnmap &lt;right&gt;    :tabn&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(545, 0, 'Indent Current Block\n', '&quot; indent block of code\r\nmap &lt;Leader&gt;ib vip=', '2013-07-11', '2013-07-11'),
(546, 0, 'HTML TAG to HTML TAG\n', 'nnoremap &lt;Tab&gt; /&lt;\\w*\\(\\s\\\\|&gt;\\)&lt;CR&gt;\r\nnnoremap &lt;S-Tab&gt; ?&lt;\\w*\\(\\s\\\\|&gt;\\)&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(547, 0, 'Exchange arbitrary strings\n', 'vnoremap &lt;Leader&gt;x &lt;Esc&gt;`.``gvP``P', '2013-07-11', '2013-07-11'),
(548, 0, 'Preview function signature\n', '&lt;C-}&gt;', '2013-07-11', '2013-07-11'),
(549, 0, 'Toggle colorcolumn\n', 'function! g:ToggleColorColumn()\r\n  if &amp;colorcolumn != ''''\r\n    setlocal colorcolumn&amp;\r\n  else\r\n    setlocal colorcolumn=+1\r\n  endif\r\nendfunction\r\n\r\nnnoremap &lt;silent&gt; &lt;leader&gt;cc :call g:ToggleColorColumn()&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(550, 0, 'Toggle relativecolumn with mapping\n', 'function! g:ToggleRelativeNumber()\r\n  if &amp;relativenumber\r\n    setlocal number\r\n  else\r\n    setlocal relativenumber\r\n  endif\r\nendfunction\r\n\r\nnnoremap &lt;silent&gt; &lt;leader&gt;nu :call g:ToggleRelativeNumber()&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(551, 0, 'Use relativenumber only in the focused window\n', 'if exists(''&amp;relativenumber'')\r\n  set relativenumber\r\n  augroup WindowRNU\r\n    auto!\r\n    auto BufWinEnter,WinEnter,FocusGained * setlocal relativenumber\r\n    auto WinLeave,FocusLost               * setlocal number\r\n  augroup END\r\nendif', '2013-07-11', '2013-07-11'),
(552, 0, 'Jump to file or tag in vertical split\n', '&quot; use ,F to jump to tag in a vertical split\r\nnnoremap &lt;silent&gt; ,F :let word=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;:vsp&lt;CR&gt;:wincmd w&lt;cr&gt;:exec(&quot;tag &quot;. word)&lt;cr&gt;\r\n\r\n&quot; use ,gf to go to file in a vertical split\r\nnnoremap &lt;silent&gt; ,gf :vertical botright wincmd f&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(553, 0, 'list buffers and switch to a buffer quickly\n', 'nmap &lt;leader&gt;b :ls&lt;CR&gt;:buffer&lt;Space&gt;', '2013-07-11', '2013-07-11'),
(554, 0, 'Test\n', 'Test', '2013-07-11', '2013-07-11'),
(555, 0, 'add empty lines without insert\n', '&quot;moving lines with enter and shift enter\r\nmap &lt;CR&gt; o&lt;Esc&gt;k\r\nmap &lt;S-Enter&gt; O&lt;Esc&gt;j', '2013-07-11', '2013-07-11'),
(556, 0, 'remove diff formatting from buffer\n', 'noremap ,do :set nodiff fdc=0 \\| norm zR&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(557, 0, 'Use space to move through split windows\n', 'nmap &lt;Space&gt; &lt;C-w&gt;w\r\nnmap &lt;S-Space&gt; &lt;C-w&gt;W', '2013-07-11', '2013-07-11'),
(558, 0, 'create new line above current\n', 'inoremap &lt;C-b&gt; &lt;C-o&gt;O', '2013-07-11', '2013-07-11'),
(559, 0, 'Convert selection to html\n', 'vnoremap &lt;leader&gt;h :TOhtml&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(560, 0, 'directory index for the images preview like a boss\n', 'cd dir-with-images\r\n\r\nvim index.html  \r\n\r\n:r!ls \r\n\r\n:%s/^\\(.+\\)$/&lt;img src&quot;\\1&quot;&gt;/g', '2013-07-11', '2013-07-11'),
(561, 0, 'paste cut text in insert mode\n', 'inoremap &lt;c-d&gt; &lt;c-r&gt;&quot;', '2013-07-11', '2013-07-11'),
(562, 0, 'Number text object\n', 'onoremap N :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(0)&lt;cr&gt;\r\nxnoremap N :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(0)&lt;cr&gt;\r\nonoremap aN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\nxnoremap aN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\nonoremap iN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\nxnoremap iN :&lt;c-u&gt;call &lt;SID&gt;NumberTextObject(1)&lt;cr&gt;\r\n\r\nfunction! s:NumberTextObject(whole)\r\n    normal! v\r\n\r\n    while getline(''.'')[col(''.'')] =~# ''\\v[0-9]''\r\n        normal! l\r\n    endwhile\r\n\r\n    if a:whole\r\n        normal! o\r\n\r\n        while col(''.'') &gt; 1 &amp;&amp; getline(''.'')[col(''.'') - 2] =~# ''\\v[0-9]''\r\n            normal! h\r\n        endwhile\r\n    endif\r\nendfunction', '2013-07-11', '2013-07-11'),
(563, 0, 'vim folding for ruby\n', 'set foldtext=MyFoldFunction()\r\nset fillchars=fold:\\ \r\n\r\nfunction! MyFoldFunction()\r\n  let line = getline(v:foldstart)\r\n  let lastline = getline(v:foldend)\r\n  let numfolded = v:foldend - v:foldstart + 1\r\n  return line . ''  folded '' . numfolded . '' lines''\r\nendfunction\r\n\r\nhighlight Folded term=bold ctermbg=0 ctermfg=7 guibg=bg guifg=fg\r\nhighlight FoldColumn term=bold ctermbg=10 ctermfg=7 guibg=bg guifg=fg', '2013-07-11', '2013-07-11'),
(564, 0, 'Find references to file\n', '&quot;GitGrep - open up a git grep line, with a quote started for the search\r\nnnoremap ,gg :GitGrep &quot;&quot;&lt;left&gt;\r\n&quot;GitGrep Current Partial\r\nnnoremap ,gcp :GitGrepCurrentPartial&lt;CR&gt;\r\n&quot;GitGrep Current File\r\nnnoremap ,gcf :call GitGrep(expand(&quot;%:t:r&quot;))&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(565, 0, 'Quickly switch to normal and save\n', 'inoremap ;; &lt;esc&gt;&lt;right&gt;\r\nnmap ; :\r\ncabbrev ; update', '2013-07-11', '2013-07-11'),
(566, 0, 'Increase decrease fold columns size\n', '&quot; increase foldlevel\r\nnnoremap &lt;silent&gt; &lt;localleader&gt;= zr:call FoldColumnSize()&lt;cr&gt;\r\n&quot; decrease foldlevel\r\nnnoremap &lt;silent&gt; &lt;localleader&gt;- zm:call FoldColumnSize()&lt;cr&gt;\r\n\r\nfunction! FoldColumnSize()\r\n    if &amp;foldenable\r\n        :exec &quot;setlocal foldcolumn=&quot; . eval(&amp;foldlevel+1)\r\n    else\r\n        setlocal foldcolumn=0\r\n    endif\r\n    :normal! zz\r\nendfunction', '2013-07-11', '2013-07-11'),
(567, 0, 'Open another gvim process from current window\n', 'command! -nargs=? -complete=help Ghelp call s:Vim(''-c help '' . &lt;q-args&gt;)\r\ncommand! -nargs=? -complete=file Gvim call s:Vim(&lt;q-args&gt;)\r\n\r\nfunction! s:Vim(cmd)\r\n    let com = ''gvim''\r\n    let com .= '' &quot;'' . expand(a:cmd) . ''&quot;''\r\n    silent call system(com)\r\nendfunction', '2013-07-11', '2013-07-11'),
(568, 0, 'Append line to current clipboard\n', 'nnoremap &lt;silent&gt; &lt;localleader&gt;a :call ClipAppend()&lt;cr&gt;\r\n\r\nfunc! ClipAppend()\r\n    let @a=@0\r\n    normal! &quot;Ayy\r\n    let @0=@a\r\nendfunc', '2013-07-11', '2013-07-11'),
(569, 0, 'Move window up / down / left / right with wasd\n', '&quot; swap window positions (wasd)\r\nnnoremap &lt;m-s-s&gt; :call WindowSwap(''h'')&lt;cr&gt;&lt;c-w&gt;J&lt;c-w&gt;=\r\nnnoremap &lt;m-s-w&gt; :call WindowSwap(''h'')&lt;cr&gt;&lt;c-w&gt;K&lt;c-w&gt;=\r\nnnoremap &lt;m-s-a&gt; :call WindowSwap(''v'')&lt;cr&gt;&lt;c-w&gt;H&lt;c-w&gt;=\r\nnnoremap &lt;m-s-d&gt; :call WindowSwap(''v'')&lt;cr&gt;&lt;c-w&gt;L&lt;c-w&gt;=\r\n\r\n\r\nfunction! WindowSwap(dir)\r\n    if winnr(''$'')==1\r\n        if a:dir==''h'' | :new | else | :vnew | endif\r\n        wincmd p\r\n    endif\r\nendfunction', '2013-07-11', '2013-07-11'),
(570, 0, 'Ex commands in insert mode\n', '&quot; ex mode numbers\r\n\r\nfor i in range(1,9)\r\n    exec ''inoremap &lt;m-''.i.''&gt; &lt;C-o&gt;''.i\r\nendfor', '2013-07-11', '2013-07-11'),
(571, 0, 'Remap undo/redo\n', '&quot; undo m-- or &lt;c-x&gt;u\r\ninoremap &lt;m--&gt; &lt;esc&gt;uzvzza\r\nnnoremap &lt;m--&gt; uzvzz\r\n\r\n\r\n&quot;redo m-=\r\ninoremap &lt;m-=&gt; &lt;esc&gt;&lt;C-R&gt;vzzza\r\nnnoremap &lt;m-=&gt; &lt;c-R&gt;zvzz', '2013-07-11', '2013-07-11'),
(572, 0, 'Entire buffer text object\n', '&quot; make vig select entire file\r\nonoremap &lt;silent&gt; ig &lt;esc&gt;:execute &quot;:normal! ggVG&quot; . v:operator&lt;cr&gt; \r\nvnoremap &lt;silent&gt; ig :normal! ggVG&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(573, 0, 'Split line based on delimiter\n', 'command! -nargs=? SplitLines :call &lt;SID&gt;SplitLines(''&lt;args&gt;'')\r\n\r\nfunction! &lt;SID&gt;SplitLines(...) \r\n    if a:1 == ''''\r\n        let delimiter = input(&quot;Delimiter: &quot;)\r\n        if delimiter == ''''\r\n            return\r\n        endif\r\n    else\r\n        let delimiter=a:1\r\n    endif\r\n    silent! execute ''s=\\('' . delimiter . ''\\+\\)=\\1\\r=g''\r\nendfunction', '2013-07-11', '2013-07-11'),
(574, 0, 'Quickly Edit Text between HTML Tags\n', '&quot; delete Text and go switch to insert mode between HTML-Tags\r\nmap &lt;Leader&gt;&lt; F&gt;lct&lt;', '2013-07-11', '2013-07-11'),
(575, 0, 'Use fj as &lt;Esc&gt; alternative\n', '&quot; Use fj as &lt;Esc&gt; alternative\r\ninoremap fj &lt;esc&gt;', '2013-07-11', '2013-07-11'),
(576, 0, 'make rapid time travel easier\n', 'noremap &lt;left&gt; g-\r\nnoremap &lt;right&gt; g+', '2013-07-11', '2013-07-11'),
(577, 0, 'Use arrow keys to change tabs\n', ':noremap &lt;left&gt; :tabprevious&lt;CR&gt;\r\n:noremap &lt;right&gt; :tabnext&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(578, 0, 'Remap U to &lt;C-r&gt; for easier redo\n', '&quot; remap U to &lt;C-r&gt; for easier redo\r\nnnoremap U &lt;C-r&gt;', '2013-07-11', '2013-07-11'),
(579, 0, 'Allow local vimrc configurations\n', 'if filereadable(&quot;.local.vim&quot;)\r\n  source .local.vim\r\nendif', '2013-07-11', '2013-07-11'),
(580, 0, 'Remove trailing whitespace\n', 'map &lt;Leader&gt;&lt;Space&gt; :%s/\\s\\+$//g&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(581, 0, 'use the undo tree by default\n', 'nnoremap u g-\r\nnnoremap &lt;C-R&gt; g+', '2013-07-11', '2013-07-11'),
(582, 0, 'Map C-c to Esc so that InsertLeave gets called\n', 'inoremap &lt;silent&gt; &lt;C-C&gt; &lt;Esc&gt;', '2013-07-11', '2013-07-11'),
(583, 0, 'Better undo when in Insert mode\n', 'au CursorHoldI * :call feedkeys(&quot;\\&lt;c-g&gt;u&quot;,''t'')\r\n\r\nau InsertEnter * let updaterestore=&amp;updatetime \r\n                \\|set updatetime=500\r\n\r\nau InsertLeave * let &amp;updatetime=updaterestore', '2013-07-11', '2013-07-11'),
(584, 0, 'Open new tabs at the end\n', 'autocmd BufNew * if &amp;showtabline &amp;&amp; winnr(&quot;$&quot;) == 1 | tabmove | endif', '2013-07-11', '2013-07-11'),
(585, 0, 'Substitute all matches in a line by default\n', 'set gdefault', '2013-07-11', '2013-07-11'),
(586, 0, 'Update open files when changed externally\n', 'set autoread', '2013-07-11', '2013-07-11'),
(587, 0, 'Write files automatically\n', 'set autowriteall', '2013-07-11', '2013-07-11'),
(588, 0, 'Create a shortcut to mute highlighting\n', 'nnoremap &lt;silent&gt; &lt;C-l&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;&lt;C-l&gt;', '2013-07-11', '2013-07-11'),
(589, 0, 'arrow keys for quick buffer/window navigation\n', '&quot; NOTE: use arrow keys for quick buffer/window navigation                                             \r\n&quot; switch to the previous buffer\r\nnoremap &lt;silent&gt; &lt;left&gt; :bprevious&lt;cr&gt;\r\n \r\n&quot; switch to the next buffer\r\nnoremap &lt;silent&gt; &lt;right&gt; :bnext&lt;cr&gt;\r\n \r\n&quot; make the currently active window the only one\r\nnoremap &lt;silent&gt; &lt;up&gt; :only&lt;cr&gt;\r\n \r\n&quot; show all buffers, type ''buffer'' in the command line so all I have to do\r\n&quot; is type a number and hit enter to switch to that buffer (or hit &lt;esc&gt; to quit)\r\nnoremap &lt;silent&gt; &lt;down&gt; :ls&lt;cr&gt;:buffer', '2013-07-11', '2013-07-11'),
(590, 0, 'Refactor local variable to &quot;let&quot;-block\n', '&quot; Extract spec local variable into Rspec &quot;let&quot;-block\r\n&quot;\r\n&quot; Example:\r\n&quot;\r\n&quot;   describe Post do\r\n&quot;     it ''should be published'' do\r\n&quot;       post = create :post # &lt;== current line\r\n&quot;       post.should be_published\r\n&quot;     end\r\n&quot;   end\r\n&quot;\r\n&quot; Becomes:\r\n&quot;\r\n&quot;   describe Post do\r\n&quot;     let(:post) {  create :post }\r\n&quot;     it ''should be published'' do\r\n&quot;       post.should be_published # &lt;== current line\r\n&quot;     end\r\n&quot;   end\r\n&quot;\r\n&quot; ^M is carriage return character (insert using ^V^M)\r\n&quot; ^[ is escape character (insert using ^V^[)\r\nlet @l=''jmlkdd?\\vdescribe|context?^Mp==I:^[^ys2w)Iletf=xys${`l''', '2013-07-11', '2013-07-11'),
(591, 0, 'open help in expanded window\n', 'set helpheight=999                    &quot; when viewing the help documentation use a full-sized window (instead of 1/2 the size)', '2013-07-11', '2013-07-11'),
(592, 0, 'Easy window Movement\n', 'nnoremap &lt;Tab&gt;h &lt;C-w&gt;h                                                                                                                                                                                                                                     \r\nnnoremap &lt;Tab&gt;j &lt;C-w&gt;j                                                                                                                                                                                                                                     \r\nnnoremap &lt;Tab&gt;k &lt;C-w&gt;k                                                                                                                                                                                                                                     \r\nnnoremap &lt;Tab&gt;l &lt;C-w&gt;l', '2013-07-11', '2013-07-11'),
(593, 0, 'Show Git Branch\n', 'function! GitBranch()\r\n  let branch = system(&quot;git branch 2&gt; /dev/null | sed -e ''/^[^*]/d'' -e ''s/* //''&quot;)\r\n  if branch != ''''\r\n    return ''   Git Branch: '' . substitute(branch, ''\\n'', '''', ''g'')\r\n  en  \r\n  return ''''\r\nendfunction\r\n\r\n&quot; minimal status line, only shows git branch\r\nset statusline=%{GitBranch()}', '2013-07-11', '2013-07-11'),
(594, 0, 'append a character in insert-mode\n', 'function! AppendChar()\r\n    :let pos = getpos(&quot;.&quot;)\r\n    :let text = &quot;;&quot;\r\n    :execute &quot;:normal A&quot;.text\r\n    :call setpos(''.'', pos)\r\n:endfunction', '2013-07-11', '2013-07-11'),
(595, 0, 'tile all open buffers in windows\n', '&quot; open all buffers in separate (vertical) panes (see '':help :ball'' and '':help :vertical'')\r\nnoremap &lt;silent&gt; &lt;leader&gt;a :vertical :ball&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(596, 0, 'Clear Whitespace on Save\n', '&quot; From http://vimcasts.org/episodes/tidying-whitespace/\r\n&quot; Preserves/Saves the state, executes a command, and returns to the saved state\r\n&quot; Modified from http://vimbits.com/bits/231\r\n&quot; Remove trailing whitespace on save\r\nfunction! Preserve(command)\r\n    &quot; Save last search, and cursor position.\r\n    let _s=@/\r\n    let l = line(&quot;.&quot;)\r\n    let c = col(&quot;.&quot;)\r\n    &quot; Do the business:\r\n    execute a:command\r\n    &quot; Clean up: restore previous search history, and cursor position\r\n    let @/=_s\r\n    call cursor(l, c)\r\nendfunction\r\n&quot; Execute clear whitespace on save\r\nautocmd BufWritePre * :call Preserve(&quot;%s/\\\\s\\\\+$//e&quot;)', '2013-07-11', '2013-07-11'),
(597, 0, 'Improve CtrlP\n', 'let ctrlp_filter_greps = &quot;&quot;.\r\n    \\ &quot;egrep -iv ''\\\\.(&quot; .\r\n    \\ &quot;jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po&quot; .\r\n    \\ &quot;)$'' | &quot; .\r\n    \\ &quot;egrep -v ''^(\\\\./)?(&quot; .\r\n    \\ &quot;deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/&quot; .\r\n    \\ &quot;)''&quot;\r\n\r\nlet my_ctrlp_git_command = &quot;&quot; .\r\n    \\ &quot;cd %s &amp;&amp; git ls-files | &quot; .\r\n    \\ ctrlp_filter_greps\r\n\r\nif has(&quot;unix&quot;)\r\n    let my_ctrlp_user_command = &quot;&quot; .\r\n    \\ &quot;find %s ''('' -type f -or -type l '')'' -maxdepth 15 -not -path ''*/\\\\.*/*'' | &quot; .\r\n    \\ ctrlp_filter_greps\r\nendif\r\n\r\nlet g:ctrlp_user_command = [''.git/'', my_ctrlp_git_command, my_ctrlp_user_command]', '2013-07-11', '2013-07-11'),
(598, 0, 'List all matches for a search\n', ':g/', '2013-07-11', '2013-07-11'),
(599, 0, 'Substitute word under cursor/selection\n', '&quot; Substitute word under cursor globally\r\nnnoremap &lt;C-s&gt; :%s/\\&lt;&lt;C-r&gt;&lt;C-w&gt;\\&gt;//g&lt;Left&gt;&lt;Left&gt;\r\n&quot; ask for confirmation\r\nnnoremap &lt;A-s&gt; :%s/\\&lt;&lt;C-r&gt;&lt;C-w&gt;\\&gt;//gc&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;\r\n\r\n&quot; Substitute selection globally\r\nvnoremap &lt;C-s&gt; y&lt;Esc&gt;:%s/&lt;C-r&gt;&quot;//g&lt;Left&gt;&lt;Left&gt;\r\n&quot; ask for confirmation\r\nvnoremap &lt;A-s&gt; y&lt;Esc&gt;:%s/&lt;C-r&gt;&quot;//gc&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;', '2013-07-11', '2013-07-11'),
(600, 0, 'Duplicate current tab\n', 'nnoremap &lt;F4&gt; mt:tabe&lt;SPACE&gt;%&lt;CR&gt;gT`tgt`t', '2013-07-11', '2013-07-11'),
(601, 0, 'Easy switch between windows\n', 'nmap &lt;tab&gt;&lt;tab&gt; &lt;C-w&gt;w', '2013-07-11', '2013-07-11'),
(602, 0, 'Open help to the right or in new tab\n', 'cnoremap &lt;expr&gt; hr getcmdtype() == '':'' &amp;&amp; empty(getcmdline()) ? ''bo vert h '' : ''hr''\r\ncnoremap &lt;expr&gt; ht getcmdtype() == '':'' &amp;&amp; empty(getcmdline()) ? ''tab h ''     : ''ht''', '2013-07-11', '2013-07-11'),
(603, 0, 'Easy Diffing\n', 'map  &lt;leader&gt;gq :diffoff&lt;cr&gt;&lt;c-w&gt;h:q&lt;cr&gt;\r\nmap  &lt;leader&gt;gg :Gdiff&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(604, 0, 'Indent the whole buffer\n', 'noremap &lt;Leader&gt;= m`gg=G``', '2013-07-11', '2013-07-11'),
(605, 0, 'Mouse support\n', 'if has(''mouse'')\r\n  set mouse=a\r\nendif', '2013-07-11', '2013-07-11'),
(606, 0, 'English spellchecking but no spellchecking by default\n', 'if has(''spell'')\r\n  silent! language messages &quot;en&quot;\r\n  set langmenu=none\r\n  set spl=en spell\r\n  set nospell\r\nendif', '2013-07-11', '2013-07-11'),
(607, 0, 'Git commit messages have spellcheck and start in insert mode\n', 'if has(''autocmd'')\r\n  if has(''spell'')\r\n    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell\r\n  endif\r\n  au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys(''ggi'', ''t'')\r\nendif', '2013-07-11', '2013-07-11'),
(608, 0, 'Fold stuff around selection\n', ':vnoremap &lt;Leader&gt;za &lt;Esc&gt;`&lt;kzfgg`&gt;jzfG`&lt;', '2013-07-11', '2013-07-11'),
(609, 0, 'Easy escape without cursor movement\n', 'inoremap jj &lt;Esc&gt;`^', '2013-07-11', '2013-07-11'),
(610, 0, 'Move paragraphs up and down easily with one keystroke\n', 'nnoremap &lt;C-j&gt; vapd}p\r\nnnoremap &lt;C-k&gt; vapd{{p', '2013-07-11', '2013-07-11'),
(611, 0, 'Delete a buffer in CtrlPBuf mode\n', 'let g:ctrlp_buffer_func = { ''enter'': ''MyCtrlPMappings'' }\r\n\r\nfunc! MyCtrlPMappings()\r\n    nnoremap &lt;buffer&gt; &lt;silent&gt; &lt;c-@&gt; :call &lt;sid&gt;DeleteBuffer()&lt;cr&gt;\r\nendfunc\r\n\r\nfunc! s:DeleteBuffer()\r\n    exec &quot;bd&quot; fnamemodify(getline(''.'')[2:], '':p'')\r\n    exec &quot;norm \\&lt;F5&gt;&quot;\r\nendfunc', '2013-07-11', '2013-07-11'),
(612, 0, 'Better than escape\n', 'Use ctrl+[ instead of &lt;escape&gt; or some random key binding.', '2013-07-11', '2013-07-11'),
(613, 0, 'move cursor when insert mode\n', '﻿﻿﻿imap &lt;C-h&gt; &lt;C-o&gt;h\r\nimap &lt;C-j&gt; &lt;C-o&gt;j\r\nimap &lt;C-k&gt; &lt;C-o&gt;k\r\nimap &lt;C-l&gt; &lt;C-o&gt;l', '2013-07-11', '2013-07-11'),
(614, 0, 'Enter a normal command when in insert mode\n', 'inoremap &lt;C-f&gt; &lt;C-o&gt;', '2013-07-11', '2013-07-11'),
(615, 0, 'Easy window navigation\n', 'map &lt;c-h&gt; &lt;c-w&gt;h\r\nmap &lt;c-j&gt; &lt;c-w&gt;j\r\nmap &lt;c-k&gt; &lt;c-w&gt;k\r\nmap &lt;c-l&gt; &lt;c-w&gt;l', '2013-07-11', '2013-07-11'),
(616, 0, 'Easy tab navigation\n', 'map &lt;s-l&gt; :tabnext&lt;cr&gt;\r\nmap &lt;s-h&gt; :tabprevious&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(617, 0, 'Force saving files that require root permissions\n', '&quot; use :W to force saving a file\r\ncom! W :w !sudo tee %', '2013-07-11', '2013-07-11'),
(618, 0, 'Center search\n', '&quot; center search\r\nnmap n nzz\r\nnmap N Nzz', '2013-07-11', '2013-07-11'),
(619, 0, 'Better tag navigation\n', 'nnoremap &lt;Return&gt; &lt;C-]&gt;\r\nnnoremap &lt;leader&gt;b &lt;C-o&gt;', '2013-07-11', '2013-07-11'),
(620, 0, 'Change current path to find files recursively\n', 'au! BufEnter * silent! let &amp;path = expand(''%:p:h'') . ''/**''', '2013-07-11', '2013-07-11'),
(621, 0, 'safdsdsf\n', 'sddsfdfs', '2013-07-11', '2013-07-11'),
(622, 0, 'Equally resize splits on window resize\n', '&quot; equally resize splits on window resize\r\nau VimResized * wincmd=', '2013-07-11', '2013-07-11'),
(623, 0, 'Color in text files\n', 'autocmd FileType text set filetype=markdown', '2013-07-11', '2013-07-11'),
(624, 0, 'Maximize vim window\n', '&quot; maximize vim window\r\ncom! MAX :let &amp;lines=500&lt;bar&gt;let &amp;columns=500\r\nmap &lt;leader&gt;m :MAX&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(625, 0, 'Move the cursor in insert mode\n', '&quot; move the cursor in insert mode\r\nimap &lt;c-h&gt; &lt;c-o&gt;h\r\nimap &lt;c-j&gt; &lt;c-o&gt;j\r\nimap &lt;c-k&gt; &lt;c-o&gt;k\r\nimap &lt;c-l&gt; &lt;c-o&gt;l', '2013-07-11', '2013-07-11'),
(626, 0, 'Activate automatic tags generation\n', 'nnoremap &lt;leader&gt;&lt;CR&gt; :autocmd BufWritePost * call system(&quot;ctags -R&quot;)&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(627, 0, 'GVim options to make it look like Vim\n', 'set guioptions+=c\r\nset guioptions+=R\r\nset guioptions-=m\r\nset guioptions-=r\r\nset guioptions-=b\r\nset guioptions-=T\r\nset guioptions-=R\r\nset guioptions-=L\r\nset guioptions-=e', '2013-07-11', '2013-07-11'),
(628, 0, 'Join lines with cursor staying in place\n', '&quot; join lines with cursor staying in place\r\nnnoremap J mzJ`z', '2013-07-11', '2013-07-11'),
(629, 0, 'Easy indent/outdent in normal mode\n', '&quot; easy indent/outdent\r\nnnoremap &lt; &lt;&lt;\r\nnnoremap &gt; &gt;&gt;', '2013-07-11', '2013-07-11'),
(630, 0, 'LaTeX Compile and Show\n', '&quot;Compiles LaTeX File in background\r\nnmap &lt;leader&gt;cl :! runlatex % &gt; logfile 2&gt;&amp;1 &amp;&lt;CR&gt;&lt;CR&gt;\r\n&quot;Open up pdf associated with current LaTeX file\r\nnmap &lt;leader&gt;ol :! okular %:r.pdf &gt; /dev/null 2&gt;&amp;1 &amp;&lt;CR&gt;&lt;CR&gt;', '2013-07-11', '2013-07-11');
INSERT INTO `op_tips` (`tipsId`, `tipsUid`, `tipsTitle`, `tipsContent`, `tipsCtime`, `tipsUtime`) VALUES
(631, 0, 'Fast open buffer\n', 'nmap &lt;c-o&gt; :ls&lt;cr&gt;:e #', '2013-07-11', '2013-07-11'),
(632, 0, 'Toggle cursor at line beginnings/endings with whitespace\n', 'function! ToggleHomeKey()\r\n  let l:col = col(''.'')            &quot; current pos\r\n                                  &quot; goto non whitespace start of line\r\n  execute ''normal! ^''\r\n  if col(''.'') == l:col            &quot; if current pos == non whitespace start of line\r\n    call cursor(line(''.''), 1)     &quot; move to beginning\r\n  endif\r\nendfun\r\n\r\nfunction! ToggleEndKey()\r\n  let l:col = col(''.'')            &quot; current pos\r\n                                  &quot; goto non whitespace end of line\r\n  execute ''normal! g_''\r\n  if col(''.'') == l:col            &quot; if current pos == non whitespace EOL\r\n                                  &quot; move to whitespace EOL\r\n    execute ''normal! $''\r\n  endif\r\nendfun\r\n\r\nnnoremap &lt;silent&gt;H :call ToggleHomeKey()&lt;CR&gt;\r\nnnoremap &lt;silent&gt;L :call ToggleEndKey()&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(633, 0, 'quick split and switch to the new split\n', 'map &lt;Leader&gt;sv &lt;c-w&gt;v&lt;c-w&gt;l\r\nmap &lt;Leader&gt;sh &lt;c-w&gt;s&lt;c-w&gt;j', '2013-07-11', '2013-07-11'),
(634, 0, 'Google the word under the cursor\n', 'nnoremap gl :set operatorfunc=GoogleOperator&lt;cr&gt;g@\r\nvnoremap gl :&lt;c-u&gt;call GoogleOperator(visualmode())&lt;cr&gt;\r\n\r\nfunction! GoogleOperator(type)\r\n  let saved_register = @@\r\n  if a:type ==# ''v''\r\n    normal! `&lt;v`&gt;y\r\n  elseif a:type ==# ''char''\r\n    normal! `[v`]y\r\n  else\r\n    return\r\n  endif\r\n  silent execute &quot;! open &quot; . shellescape(&quot;https://www.google.com/search?q=&quot; . @@)\r\n  let @@ = saved_register\r\n  redraw!\r\nendfunction', '2013-07-11', '2013-07-11'),
(635, 0, 'Fast File Browser\n', 'nmap ,, :e.&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(636, 0, 'Continuous delimiter line\n', 'set fillchars=vert:┃,diff:⎼,fold:⎼', '2013-07-11', '2013-07-11'),
(637, 0, 'Quick buffer navigation\n', 'nnoremap gb :buffers&lt;CR&gt;:sb&lt;Space&gt;', '2013-07-11', '2013-07-11'),
(638, 0, 'Append a semicolon and come back\n', 'inoremap &lt;leader&gt;; &lt;C-o&gt;m`&lt;C-o&gt;A;&lt;C-o&gt;``', '2013-07-11', '2013-07-11'),
(639, 0, '&quot;Jump to definition&quot; and &quot;preview definition&quot; for JavaScript\n', 'nnoremap &lt;leader&gt;] :tjump /&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;&lt;cr&gt;\r\nnnoremap &lt;leader&gt;} :ptag /&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(640, 0, 'Quick edit\n', 'nnoremap &lt;leader&gt;o *Ncgn', '2013-07-11', '2013-07-11'),
(641, 0, 'Quick substitution\n', 'nnoremap &lt;leader&gt;r :''{,''}s/&lt;c-r&gt;=expand(''&lt;cword&gt;'')&lt;cr&gt;/', '2013-07-11', '2013-07-11'),
(642, 0, 'Quick visual mode substitution\n', 'nnoremap &lt;leader&gt;s *N\r\nxnoremap &lt;leader&gt;s &quot;*y&lt;Esc&gt;:let @/ = substitute(escape(@*, ''\\/.*$^~[]''), &quot;\\n&quot;, ''\\\\n'', &quot;g&quot;) &lt;bar&gt; echo @/&lt;cr&gt;\r\n\r\nxnoremap &lt;leader&gt;r :s/&lt;c-r&gt;=expand(@/)&lt;cr&gt;/', '2013-07-11', '2013-07-11'),
(643, 0, 'Toggle folds with Space\n', 'nnoremap &lt;silent&gt; &lt;Space&gt; :exe ''silent! normal! za''.(foldlevel(''.'') ? '''' : ''l'')&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(644, 0, 'Repeat previous command with a bang\n', 'nnoremap &lt;Leader&gt;! q:kWgea!&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(645, 0, 'Map leader to space bar\n', 'let mapleader=&quot; &quot;', '2013-07-11', '2013-07-11'),
(646, 0, 'Command-line mode with double space\n', 'let mapleader=&quot; &quot;\r\nnoremap &lt;leader&gt;&lt;space&gt; :', '2013-07-11', '2013-07-11'),
(647, 0, 'C-q to escape from all modes\n', 'inoremap &lt;C-q&gt; &lt;Esc&gt;\r\nnoremap &lt;C-q&gt; &lt;Esc&gt;\r\nvnoremap &lt;C-q&gt; &lt;Esc&gt;\r\ncmap &lt;C-q&gt; &lt;C-c&gt;', '2013-07-11', '2013-07-11'),
(648, 0, 'Move in omni pop-up with C-j/k\n', 'function! OmniPopup(action)\r\n    if pumvisible()\r\n        if a:action == ''j''\r\n            return &quot;\\&lt;C-N&gt;&quot;\r\n        elseif a:action == ''k''\r\n            return &quot;\\&lt;C-P&gt;&quot;\r\n        endif\r\n    endif\r\n    return a:action\r\nendfunction\r\ninoremap &lt;silent&gt;&lt;C-j&gt; &lt;C-R&gt;=OmniPopup(''j'')&lt;CR&gt;\r\ninoremap &lt;silent&gt;&lt;C-k&gt; &lt;C-R&gt;=OmniPopup(''k'')&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(649, 0, 'Scroll the screen with the cursor movements\n', 'noremap &lt;C-j&gt; j&lt;C-e&gt;\r\nnoremap &lt;C-k&gt; k&lt;C-y&gt;', '2013-07-11', '2013-07-11'),
(650, 0, 'Go to the beginning / end of line in the insert mode\n', 'inoremap &lt;C-a&gt; &lt;Home&gt;\r\ninoremap &lt;C-e&gt; &lt;End&gt;', '2013-07-11', '2013-07-11'),
(651, 0, 'Delete a word forward in the insert mode\n', 'inoremap &lt;C-d&gt; &lt;C-o&gt;dw', '2013-07-11', '2013-07-11'),
(652, 0, 'Kill vim\n', '&quot; force quit\r\nmap &lt;silent&gt; &lt;leader&gt;k :qa!&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(653, 0, 'Open all buffers in tabs\n', '&quot; open all buffers in tabs (gui)\r\nmap &lt;silent&gt; &lt;leader&gt;tb :tab :ball&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(654, 0, 'retab and save\n', '&quot; retab and save\r\nmap &lt;leader&gt;rt :retab!&lt;bar&gt;:w&lt;cr&gt;', '2013-07-11', '2013-07-11'),
(655, 0, 'Move splits around\n', '&quot; move splits around\r\nnn &lt;leader&gt;sl &lt;c-w&gt;&lt;s-h&gt;\r\nnn &lt;leader&gt;sr &lt;c-w&gt;&lt;s-l&gt;\r\nnn &lt;leader&gt;sb &lt;c-w&gt;&lt;s-j&gt;\r\nnn &lt;leader&gt;st &lt;c-w&gt;&lt;s-k&gt;', '2013-07-11', '2013-07-11'),
(656, 0, 'Open existing buffer in a new tab\n', '&quot; open existing buffer in a newtab\r\nmap &lt;leader&gt;te :ls&lt;cr&gt;:tabedit #', '2013-07-11', '2013-07-11'),
(657, 0, 'Bash like file auto-complete\n', '&quot; nice bash-like filename auto-complete\r\nset wildmode=longest,list,full\r\nset wildmenu', '2013-07-11', '2013-07-11'),
(658, 0, 'File explorer tree-style\n', '&quot; see file explorer in tree style\r\nlet g:netrw_liststyle=3', '2013-07-11', '2013-07-11'),
(659, 0, 'Toggle Ctags window\n', 'noremap   &lt;silent&gt; &lt;C-g&gt; :TlistToggle&lt;CR&gt;', '2013-07-11', '2013-07-11'),
(660, 0, 'Tab/Split Navigation\n', 'nnoremap &lt;Tab&gt; gt\r\nnnoremap &lt;S-Tab&gt; gT\r\nnnoremap &lt;Space&gt; &lt;C-w&gt;w\r\nnnoremap &lt;S-Space&gt; &lt;C-w&gt;W', '2013-07-11', '2013-07-11'),
(661, 0, 'Arrow keys like other text editors\n', 'nnoremap &lt;up&gt; gk\r\nnnoremap &lt;down&gt; gj', '2013-07-11', '2013-07-11'),
(662, 0, 'Command-line mode with the enter key\n', 'noremap &lt;CR&gt; :', '2013-07-11', '2013-07-11'),
(663, 0, 'Tab insert with supertab\n', 'inoremap &lt;Leader&gt;&lt;tab&gt; &lt;c-v&gt;&lt;tab&gt;', '2013-07-11', '2013-07-11'),
(664, 0, 'Move current visual selection up or down\n', 'vnoremap &lt;C-n&gt; &lt;esc&gt;`&lt;gv:m ''&lt;-2&lt;cr&gt;gv                                                     \r\nvnoremap &lt;C-m&gt; &lt;esc&gt;`&gt;gv:m ''&gt;+1&lt;cr&gt;gv\r\n&quot; Or a single line in normal mode\r\nnnoremap &lt;C-n&gt; mz:m+&lt;cr&gt;`z\r\nnnoremap &lt;C-m&gt; mz:m-2&lt;cr&gt;`z', '2013-07-11', '2013-07-11');

-- --------------------------------------------------------

--
-- 表的结构 `op_type`
--

CREATE TABLE IF NOT EXISTS `op_type` (
  `typeId` int(11) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `typeEName` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`typeId`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=8 ;

--
-- 转存表中的数据 `op_type`
--

INSERT INTO `op_type` (`typeId`, `typeName`, `typeEName`) VALUES
(1, '效率', 'utility'),
(2, '语法', 'syntax'),
(3, '缩进', 'indent'),
(4, '配色', 'color scheme'),
(5, '文件类型插件', 'ftplugin'),
(6, '游戏', 'game'),
(7, '补丁', 'patch');

-- --------------------------------------------------------

--
-- 表的结构 `op_type_relationships`
--

CREATE TABLE IF NOT EXISTS `op_type_relationships` (
  `pluginId` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- 表的结构 `op_user`
--

CREATE TABLE IF NOT EXISTS `op_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `op_username` varchar(40) COLLATE utf8_unicode_ci NOT NULL,
  `op_email` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `op_password` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=4 ;

--
-- 转存表中的数据 `op_user`
--

INSERT INTO `op_user` (`id`, `op_username`, `op_email`, `op_password`) VALUES
(1, 'jack', '', ''),
(2, 'mary', '', ''),
(3, 'foursking', '476743104@qq.com', 'e10adc3949ba59abbe56e057f20f883e');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
